{
    "layers": [
        {
            "layerDefinition": {
                "defaultVisibility": true,
                "minScale": 12000000,
                "maxScale": 0,
                "drawingInfo": {
                    "renderer": {
                        "type": "simple",
                        "symbol": {
                            "type": "esriSFS",
                            "color": [
                                255,
                                71,
                                71,
                                128
                            ],
                            "outline": {
                                "type": "esriSLS",
                                "color": [
                                    110,
                                    110,
                                    110,
                                    255
                                ],
                                "width": 0.75,
                                "style": "esriSLSSolid"
                            },
                            "style": "esriSFSSolid"
                        }
                    }
                }
            },
            "id": 0,
            "attributeTableInfo": {
                "attributeTableElements": [
                    {
                        "label": "AkFireNumber",
                        "type": "field",
                        "fieldName": "AkFireNumber"
                    },
                    {
                        "label": "AkFireRegion",
                        "type": "field",
                        "fieldName": "AkFireRegion"
                    },
                    {
                        "label": "AkMine_Active_AttrCount",
                        "type": "field",
                        "fieldName": "AkMine_Active_AttrCount"
                    },
                    {
                        "label": "AkMine_FeatureCount",
                        "type": "field",
                        "fieldName": "AkMine_FeatureCount"
                    },
                    {
                        "label": "AkMine_Nearest",
                        "type": "field",
                        "fieldName": "AkMine_Nearest"
                    },
                    {
                        "label": "AkMine_Note_AttrCount",
                        "type": "field",
                        "fieldName": "AkMine_Note_AttrCount"
                    },
                    {
                        "label": "AkMine_Type_AttrCount",
                        "type": "field",
                        "fieldName": "AkMine_Type_AttrCount"
                    },
                    {
                        "label": "AkPowerLine_CondType_FeetSum",
                        "type": "field",
                        "fieldName": "AkPowerLine_CondType_FeetSum"
                    },
                    {
                        "label": "AkPowerLine_Nearest",
                        "type": "field",
                        "fieldName": "AkPowerLine_Nearest"
                    },
                    {
                        "label": "AkPowerLine_TotalFeet",
                        "type": "field",
                        "fieldName": "AkPowerLine_TotalFeet"
                    },
                    {
                        "label": "AkPowerLine_Voltage_FeetSum",
                        "type": "field",
                        "fieldName": "AkPowerLine_Voltage_FeetSum"
                    },
                    {
                        "label": "Aksd_FeatureCount",
                        "type": "field",
                        "fieldName": "Aksd_FeatureCount"
                    },
                    {
                        "label": "Aksd_MainStruct_AttrSum",
                        "type": "field",
                        "fieldName": "Aksd_MainStruct_AttrSum"
                    },
                    {
                        "label": "Aksd_Nearest",
                        "type": "field",
                        "fieldName": "Aksd_Nearest"
                    },
                    {
                        "label": "Aksd_OtherStruct_AttrSum",
                        "type": "field",
                        "fieldName": "Aksd_OtherStruct_AttrSum"
                    },
                    {
                        "label": "Aksd_Protection_AttrCount",
                        "type": "field",
                        "fieldName": "Aksd_Protection_AttrCount"
                    },
                    {
                        "label": "Aksd_SiteCat_AttrCount",
                        "type": "field",
                        "fieldName": "Aksd_SiteCat_AttrCount"
                    },
                    {
                        "label": "AnalysisBufferMiles",
                        "type": "field",
                        "fieldName": "AnalysisBufferMiles"
                    },
                    {
                        "label": "Community_FeatureCount",
                        "type": "field",
                        "fieldName": "Community_FeatureCount"
                    },
                    {
                        "label": "Community_Name_AttrCount",
                        "type": "field",
                        "fieldName": "Community_Name_AttrCount"
                    },
                    {
                        "label": "Community_Nearest",
                        "type": "field",
                        "fieldName": "Community_Nearest"
                    },
                    {
                        "label": "ComsTwr_FeatureCount",
                        "type": "field",
                        "fieldName": "ComsTwr_FeatureCount"
                    },
                    {
                        "label": "ComsTwr_Nearest",
                        "type": "field",
                        "fieldName": "ComsTwr_Nearest"
                    },
                    {
                        "label": "ComsTwr_Type_AttrCount",
                        "type": "field",
                        "fieldName": "ComsTwr_Type_AttrCount"
                    },
                    {
                        "label": "DefaultLabel",
                        "type": "field",
                        "fieldName": "DefaultLabel"
                    },
                    {
                        "label": "FireActivityStatus",
                        "type": "field",
                        "fieldName": "FireActivityStatus"
                    },
                    {
                        "label": "HasError",
                        "type": "field",
                        "fieldName": "HasError"
                    },
                    {
                        "label": "Jurisd_Owner_AcreSum",
                        "type": "field",
                        "fieldName": "Jurisd_Owner_AcreSum"
                    },
                    {
                        "label": "Jurisd_Unit_AcreSum",
                        "type": "field",
                        "fieldName": "Jurisd_Unit_AcreSum"
                    },
                    {
                        "label": "MgmtOption_AcreSum",
                        "type": "field",
                        "fieldName": "MgmtOption_AcreSum"
                    },
                    {
                        "label": "NpsStruct_FeatureCount",
                        "type": "field",
                        "fieldName": "NpsStruct_FeatureCount"
                    },
                    {
                        "label": "NpsStruct_Nearest",
                        "type": "field",
                        "fieldName": "NpsStruct_Nearest"
                    },
                    {
                        "label": "NpsStruct_Protection_AttrCount",
                        "type": "field",
                        "fieldName": "NpsStruct_Protection_AttrCount"
                    },
                    {
                        "label": "NpsStruct_Rating_AttrCount",
                        "type": "field",
                        "fieldName": "NpsStruct_Rating_AttrCount"
                    },
                    {
                        "label": "NpsStruct_Use_AttrCount",
                        "type": "field",
                        "fieldName": "NpsStruct_Use_AttrCount"
                    },
                    {
                        "label": "NtvAllot_FeatureCount",
                        "type": "field",
                        "fieldName": "NtvAllot_FeatureCount"
                    },
                    {
                        "label": "NtvAllot_Nearest",
                        "type": "field",
                        "fieldName": "NtvAllot_Nearest"
                    },
                    {
                        "label": "NtvAllot_Status_AcreSum",
                        "type": "field",
                        "fieldName": "NtvAllot_Status_AcreSum"
                    },
                    {
                        "label": "NtvAllot_TotalAcres",
                        "type": "field",
                        "fieldName": "NtvAllot_TotalAcres"
                    },
                    {
                        "label": "Parcel_BuildingValue_AttrSum",
                        "type": "field",
                        "fieldName": "Parcel_BuildingValue_AttrSum"
                    },
                    {
                        "label": "Parcel_FeatureCount",
                        "type": "field",
                        "fieldName": "Parcel_FeatureCount"
                    },
                    {
                        "label": "Parcel_LandValue_AttrSum",
                        "type": "field",
                        "fieldName": "Parcel_LandValue_AttrSum"
                    },
                    {
                        "label": "Parcel_Nearest",
                        "type": "field",
                        "fieldName": "Parcel_Nearest"
                    },
                    {
                        "label": "Parcel_PropType_AcreSum",
                        "type": "field",
                        "fieldName": "Parcel_PropType_AcreSum"
                    },
                    {
                        "label": "Parcel_PropUse_AcreSum",
                        "type": "field",
                        "fieldName": "Parcel_PropUse_AcreSum"
                    },
                    {
                        "label": "Parcel_TotalAcres",
                        "type": "field",
                        "fieldName": "Parcel_TotalAcres"
                    },
                    {
                        "label": "Parcel_TotalValue_AttrSum",
                        "type": "field",
                        "fieldName": "Parcel_TotalValue_AttrSum"
                    },
                    {
                        "label": "PertolTerm_Nearest",
                        "type": "field",
                        "fieldName": "PertolTerm_Nearest"
                    },
                    {
                        "label": "PetrolTerm_Company_AttrCount",
                        "type": "field",
                        "fieldName": "PetrolTerm_Company_AttrCount"
                    },
                    {
                        "label": "PetrolTerm_FeatureCount",
                        "type": "field",
                        "fieldName": "PetrolTerm_FeatureCount"
                    },
                    {
                        "label": "PipeLine_Name_FeetSum",
                        "type": "field",
                        "fieldName": "PipeLine_Name_FeetSum"
                    },
                    {
                        "label": "PipeLine_Nearest",
                        "type": "field",
                        "fieldName": "PipeLine_Nearest"
                    },
                    {
                        "label": "PipeLine_TotalFeet",
                        "type": "field",
                        "fieldName": "PipeLine_TotalFeet"
                    },
                    {
                        "label": "PowerPlant_FeatureCount",
                        "type": "field",
                        "fieldName": "PowerPlant_FeatureCount"
                    },
                    {
                        "label": "PowerPlant_Nearest",
                        "type": "field",
                        "fieldName": "PowerPlant_Nearest"
                    },
                    {
                        "label": "PowerPlant_PrimSource_AttrCount",
                        "type": "field",
                        "fieldName": "PowerPlant_PrimSource_AttrCount"
                    },
                    {
                        "label": "PowerPlant_SectorName_AttrCount",
                        "type": "field",
                        "fieldName": "PowerPlant_SectorName_AttrCount"
                    },
                    {
                        "label": "PowerPlant_UtilName_AttrCount",
                        "type": "field",
                        "fieldName": "PowerPlant_UtilName_AttrCount"
                    },
                    {
                        "label": "Railroad_Nearest",
                        "type": "field",
                        "fieldName": "Railroad_Nearest"
                    },
                    {
                        "label": "Railroad_NetDesc_FeetSum",
                        "type": "field",
                        "fieldName": "Railroad_NetDesc_FeetSum"
                    },
                    {
                        "label": "Railroad_TotalFeet",
                        "type": "field",
                        "fieldName": "Railroad_TotalFeet"
                    },
                    {
                        "label": "ReportedAcOverPerimAc",
                        "type": "field",
                        "fieldName": "ReportedAcOverPerimAc"
                    },
                    {
                        "label": "ReportedAcres",
                        "type": "field",
                        "fieldName": "ReportedAcres"
                    },
                    {
                        "label": "Roads_Nearest",
                        "type": "field",
                        "fieldName": "Roads_Nearest"
                    },
                    {
                        "label": "Runway_FeatureCount",
                        "type": "field",
                        "fieldName": "Runway_FeatureCount"
                    },
                    {
                        "label": "Runway_LocID_AttrCount",
                        "type": "field",
                        "fieldName": "Runway_LocID_AttrCount"
                    },
                    {
                        "label": "Runway_Nearest",
                        "type": "field",
                        "fieldName": "Runway_Nearest"
                    },
                    {
                        "label": "Runway_Ownership_AttrCount",
                        "type": "field",
                        "fieldName": "Runway_Ownership_AttrCount"
                    },
                    {
                        "label": "Shape__Area",
                        "type": "field",
                        "fieldName": "Shape__Area"
                    },
                    {
                        "label": "Shape__Length",
                        "type": "field",
                        "fieldName": "Shape__Length"
                    },
                    {
                        "label": "Silviculture_FeatureCount",
                        "type": "field",
                        "fieldName": "Silviculture_FeatureCount"
                    },
                    {
                        "label": "Silviculture_Nearest",
                        "type": "field",
                        "fieldName": "Silviculture_Nearest"
                    },
                    {
                        "label": "Silviculture_Status_AcreSum",
                        "type": "field",
                        "fieldName": "Silviculture_Status_AcreSum"
                    },
                    {
                        "label": "Silviculture_TotalAcres",
                        "type": "field",
                        "fieldName": "Silviculture_TotalAcres"
                    },
                    {
                        "label": "Silviculture_TotalValue_AttrSum",
                        "type": "field",
                        "fieldName": "Silviculture_TotalValue_AttrSum"
                    },
                    {
                        "label": "SpecMgmt_Consid_AttrCount",
                        "type": "field",
                        "fieldName": "SpecMgmt_Consid_AttrCount"
                    },
                    {
                        "label": "SpecMgmt_FeatureCount",
                        "type": "field",
                        "fieldName": "SpecMgmt_FeatureCount"
                    },
                    {
                        "label": "SpecMgmt_Nearest",
                        "type": "field",
                        "fieldName": "SpecMgmt_Nearest"
                    },
                    {
                        "label": "UsaStruct_FeatureCount",
                        "type": "field",
                        "fieldName": "UsaStruct_FeatureCount"
                    },
                    {
                        "label": "UsaStruct_Nearest",
                        "type": "field",
                        "fieldName": "UsaStruct_Nearest"
                    },
                    {
                        "label": "UsaStruct_OccCls_AttrCount",
                        "type": "field",
                        "fieldName": "UsaStruct_OccCls_AttrCount"
                    },
                    {
                        "label": "UsaStruct_PrimOcc_AttrCount",
                        "type": "field",
                        "fieldName": "UsaStruct_PrimOcc_AttrCount"
                    },
                    {
                        "label": "UsaStruct_SecOcc_AttrCount",
                        "type": "field",
                        "fieldName": "UsaStruct_SecOcc_AttrCount"
                    },
                    {
                        "label": "WeatherStation_FeatureCount",
                        "type": "field",
                        "fieldName": "WeatherStation_FeatureCount"
                    },
                    {
                        "label": "WeatherStation_Name_AttrCount",
                        "type": "field",
                        "fieldName": "WeatherStation_Name_AttrCount"
                    },
                    {
                        "label": "WeatherStation_Nearest",
                        "type": "field",
                        "fieldName": "WeatherStation_Nearest"
                    },
                    {
                        "label": "wfigs_GISAcres",
                        "type": "field",
                        "fieldName": "wfigs_GISAcres"
                    },
                    {
                        "label": "wfigs_IncidentName",
                        "type": "field",
                        "fieldName": "wfigs_IncidentName"
                    },
                    {
                        "label": "wfigs_IrwinID",
                        "type": "field",
                        "fieldName": "wfigs_IrwinID"
                    },
                    {
                        "label": "wfigs_MapMethod",
                        "type": "field",
                        "fieldName": "wfigs_MapMethod"
                    },
                    {
                        "label": "wfigs_ModifiedOnDateTime_dt",
                        "type": "field",
                        "fieldName": "wfigs_ModifiedOnDateTime_dt"
                    },
                    {
                        "label": "wfigs_PolygonDateTime",
                        "type": "field",
                        "fieldName": "wfigs_PolygonDateTime"
                    },
                    {
                        "label": "WindTurb_FeatureCount",
                        "type": "field",
                        "fieldName": "WindTurb_FeatureCount"
                    },
                    {
                        "label": "WindTurb_Nearest",
                        "type": "field",
                        "fieldName": "WindTurb_Nearest"
                    },
                    {
                        "label": "WindTurb_ProjName_AttrCount",
                        "type": "field",
                        "fieldName": "WindTurb_ProjName_AttrCount"
                    }
                ],
                "orderByFields": []
            },
            "popupInfo": {
                "popupElements": [
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "WFIGS Header",
                            "expression": "Expects($feature, [\n    'AkFireNumber',\n    'wfigs_IncidentName',\n    'wfigs_GISAcres',\n    'wfigs_MapMethod',\n    'wfigs_PolygonDateTime',\n    'wfigs_ModifiedOnDateTime_dt',\n    'wfigs_IrwinID',\n    'ReportedAcres',\n    'ReportedAcOverPerimAc'\n]); \n\nvar current_feat_irwin = $feature.wfigs_IrwinID;\n\nvar wfigs_locs_fset = FeatureSetByPortalItem(\n    Portal('https://nifc.maps.arcgis.com'),\n    '405814902c9e411cb4384c49d694e82b',\n    0, \n    // unused fields are commented out, may incorporate more fields as use-cases emerge.\n    [\n        'IrwinID',\n\n        'CpxName',\n\n        'DispatchCenterID',\n\n        'PercentContained',\n        'PercentPerimeterToBeContained',\n\n        //'PredominantFuelGroup',\n        //'PredominantFuelModel',\n        //'PrimaryFuelModel',\n        //'SecondaryFuelModel',\n\n        'FireMgmtComplexity',\n        'IncidentComplexityLevel',\n\n        //'WFDSSDecisionStatus',\n        'EstimatedCostToDate',\n        'TotalIncidentPersonnel',\n\n        //'POOPredictiveServiceAreaID', // use to hyperlink weather info somehow?\n        'POOProtectingAgency',\n        'POOJurisdictionalAgency',\n        'POOJurisdictionalUnit',\n\n        //'FireDiscoveryDateTime',\n\n        'ICS209ReportDateTime',\n        //'ICS209ReportForTimePeriodFrom',\n        //'ICS209ReportForTimePeriodTo',\n        'ICS209ReportStatus',\n        'IncidentManagementOrganization'\n    ],\n    false // do not return geometry\n);\n\nvar query = \"IrwinId = '\" + current_feat_irwin + \"'\";\n\nvar wfigs_loc_feat = First(Filter(wfigs_locs_fset, query));\n\nif (IsEmpty(wfigs_loc_feat)) {\n    return {\n        type : 'text', \n        text : 'System Information Error. Unable to query WFIGS source for additional attributes.'\n    }\n};\n\n//REGION title\n\nvar fire_number = Text($feature.AkFireNumber, '000');\n\nvar title_name = IIF(\n    IsEmpty(wfigs_loc_feat.CpxName),\n    fire_number + '-' + $feature.wfigs_IncidentName,\n    fire_number + '-' + $feature.wfigs_IncidentName + ' (' + wfigs_loc_feat.CpxName +  ' Complex) '\n);\n\nvar info_last_updated = 'Information Last Updated: ' + \n    Text(ChangeTimeZone(Date($feature.wfigs_ModifiedOnDateTime_dt), 'America/Anchorage'), 'MMMM DD, HH:mm') +\n    ' Alaska Time' + '<br>';\n\nvar status = 'Status: ' + $feature.FireActivityStatus;\n//ENDREGION\n\n//REGION acres\nvar reported_acres = 'Reported Acres: ' + $feature.ReportedAcres;\n\nif (IsEmpty($feature.wfigs_GISAcres)) {\n    var acres_info = reported_acres;\n} else {\n    var poly_dt = IIf(\n        IsEmpty($feature.wfigs_PolygonDateTime),\n        'Perimeter mapped on unknown date/time.' + '<br>',\n        'Perimeter Mapped on ' +\n            Text(ChangeTimeZone(Date($feature.wfigs_PolygonDateTime), 'America/Anchorage'), 'MMMM DD, HH:mm') +\n            ' Alaska Time' + '<br>'\n    );\n    var poly_map_method = IIf(\n        IsEmpty($feature.wfigs_MapMethod),\n        'Map Method: Unknown',\n        'Map Method: ' + $feature.wfigs_MapMethod\n    );\n    var perimeter_intel = poly_dt + \n        'Calculated Acres: ' + Text(Round($feature.wfigs_GISAcres,2),'###,###') + '<br>' +\n        poly_map_method;\n    var acres_info = perimeter_intel;\n};\n\nif ($feature.ReportedAcOverPerimAc == 1) {\n    var acres_info = reported_acres + '<br><br>' + perimeter_intel\n}\n\n//ENDREGION\n\n//REGION dispatch center & region\nvar center = IIF(\n    IsEmpty(wfigs_loc_feat.DispatchCenterID),\n    null,\n    'Local Dispatch Center: ' + \n        Replace(wfigs_loc_feat.DispatchCenterID, 'AK', '') + '<br>'\n);\n\nvar region = IIF(\n    IsEmpty($feature.AkFireRegion),\n    null,\n    'AK Fire Region: ' + $feature.AkFireRegion\n);\n\n//REGION personnel, cost, containment\nvar personnel = IIF(\n    IsEmpty(wfigs_loc_feat.TotalIncidentPersonnel),\n    null,\n    'Total Incident Personnel: ' + Text(wfigs_loc_feat.TotalIncidentPersonnel, '###,###') + '<br>'\n);\n\nvar cost = IIF(\n    IsEmpty(wfigs_loc_feat.EstimatedCostToDate),\n    null,\n    'Estimated Cost to Date: ' + Text(wfigs_loc_feat.EstimatedCostToDate, '$###,###') + '<br>'\n);\n\nvar containment = IIF(\n    IsEmpty(wfigs_loc_feat.PercentContained),\n    null,\n    'Percent Contained: ' + wfigs_loc_feat.PercentContained + '%' + '<br>'\n    );\n\nvar to_be_contained = IIF(\n    IsEmpty(wfigs_loc_feat.PercentPerimeterToBeContained),\n    null,\n    'Percent to be Contained: ' + wfigs_loc_feat.PercentPerimeterToBeContained + '%' + '<br>'\n    );\n\nvar region_prs_cst_cnt_empty = IIF(\n    (IsEmpty(personnel) && IsEmpty(cost) && IsEmpty(containment) && IsEmpty(to_be_contained)),\n    'Personnel, Cost, and Containment Information Unavailable at this Time.' + '<br>',\n    null\n);\n//ENDREGION\n\n//REGION POO\nvar poo_protecting_agency = IIF(\n    IsEmpty(wfigs_loc_feat.POOProtectingAgency),\n    null,\n    'POO Protecting Agency: ' + wfigs_loc_feat.POOProtectingAgency + '<br>'\n);\n\nvar poo_jurisdictional_agency = IIF(\n    IsEmpty(wfigs_loc_feat.POOJurisdictionalAgency),\n    null,\n    'POO Jurisdictional Agency: ' + wfigs_loc_feat.POOJurisdictionalAgency + '<br>'\n);\n\nvar poo_jurisdictional_unit = IIF(\n    IsEmpty(wfigs_loc_feat.POOJurisdictionalUnit),\n    null,\n    'POO Jurisdictional Unit: ' + wfigs_loc_feat.POOJurisdictionalUnit + '<br>'\n);\n\nvar region_poo_empty = IIF(\n    (IsEmpty(poo_protecting_agency) && IsEmpty(poo_jurisdictional_agency) && IsEmpty(poo_jurisdictional_unit)),\n    'Point of Origin Land Management Information Unavailable at this Time.' + '<br>',\n    null\n);\n//ENDREGION\n\n//REGION IMT and 209\nvar managegement_org = IIF(\n    IsEmpty(wfigs_loc_feat.IncidentManagementOrganization),\n    null,\n    'Incident Management Organization: ' + wfigs_loc_feat.IncidentManagementOrganization + '<br>'\n);\n\nvar fire_mgmt_complexity = IIF(\n    IsEmpty(wfigs_loc_feat.FireMgmtComplexity),\n    null,\n    'Fire Management Complexity: ' + wfigs_loc_feat.FireMgmtComplexity + '<br>'\n);\n\nvar incident_complexity_level = IIF(\n    IsEmpty(wfigs_loc_feat.IncidentComplexityLevel),\n    null,\n    'Incident Complexity Level: ' + wfigs_loc_feat.IncidentComplexityLevel + '<br>'\n);\n\nvar status_209 = IIF(\n    IsEmpty(wfigs_loc_feat.ICS209ReportStatus),\n    null,\n    'ICS 209 Report Status: ' + wfigs_loc_feat.ICS209ReportStatus + '<br>'\n);\n\nvar last_209 = IIF(\n    IsEmpty(wfigs_loc_feat.ICS209ReportDateTime),\n    null,\n    'ICS 209 Report Date/Time: ' + Text(ChangeTimeZone(Date(wfigs_loc_feat.ICS209ReportDateTime), 'America/Anchorage'), 'MMMM DD, HH:mm') + ' Alaska Time' + '<br>'\n);\n\nvar region_imt_209_empty = IIF(\n    (IsEmpty(managegement_org) && IsEmpty(fire_mgmt_complexity) && IsEmpty(incident_complexity_level) && IsEmpty(status_209) && IsEmpty(last_209)),\n    'Incident Complexity & 209 Information Unavailable at this Time.' + '<br>',\n    null\n);\n//ENDREGION\n\nvar popup_header_html = '<span style=\"font-size: 16px; color: red\">' + //REGION title\n\t'<strong>' + title_name + '</strong>' + '<br>' +\n    '<i>' + info_last_updated +\n    status + '<i/></span>' + \n    '<hr style=\"border: 1px solid black;\">' + \n    '<span style=\"font-size: 14px; color: red\">' + //REGION acres\n    '<i>' + acres_info + '</i>' + '<br>' + \n    '<hr style=\"border: 1px solid black;\">' + \n    '<details><summary><strong>Click To Expand Incident Details</strong></summary>' + //REGION BEGIN DROP-DOWN\n    '<hr style=\"border: 1px solid black;\">' + \n    '<span style=\"font-size: 14px; color: red; line-height: 1.5\">' + //REGION dispatch center & region\n    center +\n    region + '</span>' +\n\t'<hr style=\"border: 1px solid black;\">' +\n    '<span style=\"font-size: 14px; color: red; line-height: 1.5\">' + //REGION personnel, cost, containment\n    containment +\n    to_be_contained + \n    personnel +\n    cost + \n    region_prs_cst_cnt_empty + '</span>' +\n\t'<hr style=\"border: 1px solid black;\">' +\n    '<span style=\"font-size: 14px; color: red; line-height: 1.5\">' + //REGION POO\n    poo_protecting_agency +\n    poo_jurisdictional_agency +\n    poo_jurisdictional_unit +\n    region_poo_empty + '</span>' +\n\t'<hr style=\"border: 1px solid black;\">' +\n    '<span style=\"font-size: 14px; color: red; line-height: 1.5\">' + //REGION management\n    managegement_org +\n    fire_mgmt_complexity +\n    incident_complexity_level +\n    status_209 +\n    last_209 + \n    region_imt_209_empty + '</span>' +\n\t'<hr style=\"border: 1px solid black;\">'\n\nreturn { \n\ttype : 'text', \n\ttext : popup_header_html\n}",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "land management",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction sumDictValues(attrDict) {\n\tvar total_value = 0; \n\tfor (var key in attrDict) { \n\t\ttotal_value += attrDict[key];\n\t}\n\treturn total_value;\n}\n\nfunction writeLandManagementTableArray(sorted_dicts_array, total_value) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###.0') + ' acres -- ' + Round((value/total_value) * 100, 2) + ' %' + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['DefaultLabel', 'MgmtOption_AcreSum', 'Jurisd_Owner_AcreSum', 'Jurisd_Unit_AcreSum']);\nvar output_tables = [];\nvar title_data_dict = Dictionary(\n\t\"Fire Management Options\", $feature.MgmtOption_AcreSum,\n\t\"Jurisdictional Ownership\", $feature.Jurisd_Owner_AcreSum,\n\t\"Jurisdictional Unit\", $feature.Jurisd_Unit_AcreSum\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar total_value = sumDictValues(attrDict);\n\tvar html_rows_array = writeLandManagementTableArray(sorted_dicts_array, total_value);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar geom_class = Split($feature.DefaultLabel, ',', 2)[1];\n\nvar summary_main_head = '<div style=\"text-align: center; margin: 0; padding: 0;\">' + \n    '<span style=\"font-size: 16px; font-weight: bold; display: inline-block;\">' + \n    'Values-at-Risk Summary,' + geom_class +\n    '</span>' + \n    '<hr style=\"border: 2px solid black; width: 80%; margin: 0; padding: 0;\">' +\n    '</div>';\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Land Management Acreage Breakdowns</strong><details><summary><i>click to expand</i></summary><br>';\nreturn { \n\ttype : 'text', \n\ttext : summary_main_head + section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n};\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Communities",
                            "expression": "// START EXECUTION\n//\nExpects($feature,[\n\t'Community_FeatureCount',\n\t'Community_Name_AttrCount',\n]); \n\nif (IsEmpty($feature.Community_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar field_dict = Dictionary($feature.Community_Name_AttrCount);\n\nvar communities = [];\n\nfor (var key in field_dict) {\n    Push(communities, '<tr><td width=\"100%\">' + key + '</td>');\n};\n\nvar feat_or_feats = IIF(\n\t$feature.Community_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Communities: ' +\n\tText(round($feature.Community_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + '<table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +  Concatenate(communities, '</tr>') + \"</table></span>\"\n};\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "USA Structures",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'UsaStruct_FeatureCount',\n\t'UsaStruct_OccCls_AttrCount',\n\t'UsaStruct_PrimOcc_AttrCount',\n\t'UsaStruct_SecOcc_AttrCount',\n]); \n\nif (IsEmpty($feature.UsaStruct_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Structures Occupational Class\", $feature.UsaStruct_OccCls_AttrCount,\n\t\"Structures Primary Occupation\", $feature.UsaStruct_PrimOcc_AttrCount,\n\t\"Structures Secondary Occupation\", $feature.UsaStruct_SecOcc_AttrCount\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.UsaStruct_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>USA Structures: ' +\n\tText(round($feature.UsaStruct_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n};\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "AKSD",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'Aksd_FeatureCount',\n\t'Aksd_MainStruct_AttrSum',\n\t'Aksd_OtherStruct_AttrSum',\n\t'Aksd_Protection_AttrCount',\n\t'Aksd_SiteCat_AttrCount'\n]);\n\nif (IsEmpty($feature.Aksd_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar main_structs = IIF(\n    IsEmpty($feature.Aksd_MainStruct_AttrSum),\n    '---no data---',\n    $feature.Aksd_MainStruct_AttrSum\n);\n\nvar other_structs = IIF(\n    IsEmpty($feature.Aksd_OtherStruct_AttrSum),\n    '---no data---',\n    $feature.Aksd_OtherStruct_AttrSum\n);\n\nvar counted_structs_attrDict = IIF(\n    main_structs == '---no data---' && other_structs == '---no data---',\n    Dictionary('---no data---', '---no data---'),\n    Dictionary(\n    'Main Structures', $feature.Aksd_MainStruct_AttrSum,\n    'Other Structures', $feature.Aksd_OtherStruct_AttrSum\n    )\n);\n\nvar title_data_dict = Dictionary(\n\t\"Counted Structures\", counted_structs_attrDict,\n\t\"Site Category Breakdown\", makeAttrDict($feature.Aksd_SiteCat_AttrCount),\n\t\"Site Protection Level Breakdown\", makeAttrDict($feature.Aksd_Protection_AttrCount)\n);\n\nfor (var title in title_data_dict) {\n\tvar attrDict = title_data_dict[title];\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array)\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.Aksd_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Alaska Known Sites Database: ' +\n\tText(round($feature.Aksd_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "NPS Structures",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'NpsStruct_FeatureCount',\n\t'NpsStruct_Use_AttrCount',\n\t'NpsStruct_Protection_AttrCount',\n\t'NpsStruct_Rating_AttrCount',\n]); \n\nif (IsEmpty($feature.NpsStruct_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Structure Use\", $feature.NpsStruct_Use_AttrCount,\n\t\"Structure Protection Level\", $feature.NpsStruct_Protection_AttrCount,\n\t\"Structure Wildfire Risk Rating\", $feature.NpsStruct_Rating_AttrCount\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.NpsStruct_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>NPS Structures: ' +\n\tText(round($feature.NpsStruct_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n};\n//\n// END EXECUTION\n",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Parcels",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeParcelAcresTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (value == '---no data---'){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + value + '</td>');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!IsEmpty(value)){\n\t\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###.0') + ' acres</td>');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\nfunction writeParcelValuesTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (value == \"---no data---\"){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + value + ' </td>');\n\t\t\t} \n\t\t\telse {\n\t\t\t\t// NOTE THE USE OF *1 HERE. value IS ALREADY TYPE TEXT.\n\t\t\t\tif (!IsEmpty(value)){\n\t\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value*1, '$###,###') + ' USD</td>');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['Parcel_BuildingValue_AttrSum','Parcel_LandValue_AttrSum','Parcel_TotalValue_AttrSum','Parcel_PropType_AcreSum','Parcel_PropUse_AcreSum','Parcel_FeatureCount']);\n\nif (IsEmpty($feature.Parcel_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar output_tables = [];\n\nvar build_val = IIF(\n    IsEmpty($feature.Parcel_BuildingValue_AttrSum) || $feature.Parcel_BuildingValue_AttrSum == 0,\n    '---no data---',\n    $feature.Parcel_BuildingValue_AttrSum\n);\n\nvar land_val = IIF(\n    IsEmpty($feature.Parcel_LandValue_AttrSum) || $feature.Parcel_LandValue_AttrSum == 0,\n    '---no data---',\n    $feature.Parcel_LandValue_AttrSum\n);\n\nvar tot_val = IIF(\n    IsEmpty($feature.Parcel_TotalValue_AttrSum) || $feature.Parcel_TotalValue_AttrSum == 0,\n    '---no data---',\n    $feature.Parcel_TotalValue_AttrSum\n);\n\nvar pval_attrDict = IIF(\n    build_val == '---no data---' && land_val == '---no data---' && tot_val == '---no data---',\n    Dictionary(\n        '---no data---', '---no data---',\n    ),\n    Dictionary(\n\t\"Parcel Building Value\", build_val,\n\t\"Parcel Land Value\", land_val,\n\t\"Parcel Total Value\", tot_val\n    )\n);\n\nvar sorted_pvalDict_array = sortDict(pval_attrDict);\nvar pval_html_rows_array = writeParcelValuesTableArray(sorted_pvalDict_array);\nvar pval_html_table = formatTable(pval_html_rows_array, \"Parcel Values\");\nPush(output_tables, pval_html_table);\n\nvar title_data_dict = Dictionary(\n\t\"Parcel Type Acreage Breakdown\", $feature.Parcel_PropType_AcreSum,\n\t\"Parcel Use Acreage Breakdown\", $feature.Parcel_PropUse_AcreSum\n);\n\nfor (var title in title_data_dict) {\n\tvar field = DefaultValue(title_data_dict, [title], \"\");\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeParcelAcresTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.Parcel_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Land Parcels: ' +\n\tText(round($feature.Parcel_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n};\n//\n// END EXECUTION\n\n",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Allotments",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeAllotmentAcresTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###.0') + ' acres</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['NtvAllot_Status_AcreSum','NtvAllot_FeatureCount']);\n\nif (IsEmpty($feature.NtvAllot_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar output_tables = [];\n\nvar title_data_dict = Dictionary(\n\t\"Allotment Status Acreage Breakdown\", $feature.NtvAllot_Status_AcreSum,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = DefaultValue(title_data_dict, [title], \"\");\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeAllotmentAcresTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.NtvAllot_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Native Allotments: ' +\n\tText(round($feature.NtvAllot_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n};\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Powerlines",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeLineFeetTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n      if (value == '---no data---'){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n      }\n\t\t\tif (value > 5280) {\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(Round(value / 5280, 2), '###,###.00') + ' miles</td>');\n\t\t\t}\n      if (value < 5280) {\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + ' feet</td>');\n      }\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['AkPowerLine_CondType_FeetSum','AkPowerLine_Voltage_FeetSum','AkPowerLine_TotalFeet']);\n\nif (IsEmpty($feature.AkPowerLine_TotalFeet)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar output_tables = [];\n\nvar title_data_dict = Dictionary(\n\t\"Powerline Types\", $feature.AkPowerLine_CondType_FeetSum,\n\t\"Powerline Voltages\", $feature.AkPowerLine_Voltage_FeetSum\n);\n\nfor (var title in title_data_dict) {\n\tvar field = DefaultValue(title_data_dict, [title], \"\");\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeLineFeetTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n}\n\nvar total_length = IIF(\n\t$feature.AkPowerLine_TotalFeet > 5280,\n\tText(Round($feature.AkPowerLine_TotalFeet / 5280, 2), '###,###.00') + ' Miles',\n\tText(Round($feature.AkPowerLine_TotalFeet, 0),'###,###') + ' Feet'\n)\n\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Powerlines: ' +\n\ttotal_length + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + \"</span>\"\n}\n//\n// END EXECUTION\n\n",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Powerplants",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n    'PowerPlant_FeatureCount',\n    'PowerPlant_PrimSource_AttrCount',\n    'PowerPlant_SectorName_AttrCount',\n    'PowerPlant_UtilName_AttrCount'\n]); \n\nif (IsEmpty($feature.PowerPlant_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Primary Power Source\", $feature.PowerPlant_PrimSource_AttrCount,\n\t\"Sector Name\", $feature.PowerPlant_SectorName_AttrCount,\n\t\"Utility Name\", $feature.PowerPlant_UtilName_AttrCount,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.PowerPlant_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Powerplants: ' +\n\tText(round($feature.PowerPlant_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Communications Sites",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'ComsTwr_FeatureCount',\n\t'ComsTwr_Type_AttrCount',\n]); \n\nif (IsEmpty($feature.ComsTwr_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Site Type\", $feature.ComsTwr_Type_AttrCount,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.ComsTwr_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Communications Sites: ' +\n\tText(round($feature.ComsTwr_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Weather Stations",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'WeatherStation_FeatureCount',\n\t'WeatherStation_Name_AttrCount',\n]); \n\nif (IsEmpty($feature.WeatherStation_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Station Type\", $feature.WeatherStation_Name_AttrCount,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.WeatherStation_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Weather Stations: ' +\n\tText(round($feature.WeatherStation_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Pipelines",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeLineFeetTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n      if (value == '---no data---'){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n      }\n\t\t\tif (value > 5280) {\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(Round(value / 5280, 2), '###,###.00') + ' miles</td>');\n\t\t\t}\n      if (value < 5280) {\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + ' feet</td>');\n      }\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['PipeLine_TotalFeet','PipeLine_Name_FeetSum']);\n\nif (IsEmpty($feature.Pipeline_TotalFeet)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar output_tables = [];\n\nvar title_data_dict = Dictionary(\n\t\"Pipelines by Name\", $feature.PipeLine_Name_FeetSum\n);\n\nfor (var title in title_data_dict) {\n\tvar field = DefaultValue(title_data_dict, [title], \"\");\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeLineFeetTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n}\n\nvar total_length = IIF(\n\t$feature.PipeLine_TotalFeet > 5280,\n\tText(Round($feature.PipeLine_TotalFeet / 5280, 2), '###,###.00') + ' Miles',\n\tText(Round($feature.PipeLine_TotalFeet, 0),'###,###') + ' Feet'\n)\n\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Pipelines: ' +\n\ttotal_length + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION\n\n",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Petrol Terminal",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n    'PetrolTerm_FeatureCount',\n    'PetrolTerm_Company_AttrCount'\n]); \n\nif (IsEmpty($feature.PetrolTerm_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Company Name\", $feature.PetrolTerm_Company_AttrCount,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.PetrolTerm_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Petrol Terminals: ' +\n\tText(round($feature.PetrolTerm_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Mines",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n    'AkMine_Note_AttrCount',\n    'AkMine_Type_AttrCount',\n    'AkMine_FeatureCount',\n\t\t'AkMine_Active_AttrCount'\n]); \n\nif (IsEmpty($feature.AkMine_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar active_attr_dict_raw = makeAttrDict($feature.AkMine_Active_AttrCount);\n\nvar rename_active_bool = Dictionary(\n\t'0', 'No',\n\t'1', 'Yes'\n);\n\nvar active_attr_dict = Dictionary()\nfor (var key in active_attr_dict_raw) {\n\tvar new_key = rename_active_bool[key]\n\tactive_attr_dict[new_key] = active_attr_dict_raw[key]\n};\n\nvar title_data_dict = Dictionary(\n\t\"Active Status\", active_attr_dict,\n\t\"Mine Ownership\", makeAttrDict($feature.AkMine_Note_AttrCount),\n  \"Mine Type\", makeAttrDict($feature.AkMine_Type_AttrCount)\n);\n\nfor (var title in title_data_dict) {\n\tvar attrDict = title_data_dict[title];\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.AkMine_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Mines: ' +\n\tText(round($feature.AkMine_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Silviculture",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeSilvicultureAcresTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (value == '---no data---'){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + value + '</td>');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!IsEmpty(value)){\n\t\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###.0') + ' acres</td>');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\nfunction writeSilvicultureValuesTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (value == \"---no data---\"){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + value + ' </td>');\n\t\t\t} \n\t\t\telse {\n\t\t\t\tif (!IsEmpty(value)){\n\t\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '$###,###') + ' USD</td>');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['Silviculture_FeatureCount','Silviculture_Status_AcreSum','Silviculture_TotalValue_AttrSum','Silviculture_TotalAcres']);\n\nif (IsEmpty($feature.Silviculture_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar output_tables = [];\n\nvar silvi_val = IIF(\n    IsEmpty($feature.Silviculture_TotalValue_AttrSum),\n    '---no data---',\n    $feature.Silviculture_TotalValue_AttrSum\n);\n\nvar silvi_val_attrDict = Dictionary(\"Silviculture Estimated Value\", silvi_val);\n\nvar silvi_acres = IIF(\n    IsEmpty($feature.Silviculture_TotalAcres),\n    '---no data---',\n    $feature.Silviculture_TotalAcres\n);\n\nvar silvi_acres_attrDict = Dictionary(\"Silviculture Total Acres\", silvi_acres);\n\nvar sivli_val_html_rows_array = writeSilvicultureValuesTableArray([silvi_val_attrDict]);\n\nvar silvi_acres_html_rows_array = writeSilvicultureAcresTableArray([silvi_acres_attrDict]);\n\nvar silvi_totals_html_rows_array = Splice(\n    silvi_acres_html_rows_array,\n    sivli_val_html_rows_array\n)\n\nvar silvi_totals_table = formatTable(silvi_totals_html_rows_array, \"Silviculture Acreage & Estimated Value\");\nPush(output_tables, silvi_totals_table);\n\nvar title_data_dict = Dictionary(\n\t\"Silviculture Status Acreage Breakdown\", $feature.Silviculture_Status_AcreSum,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = DefaultValue(title_data_dict, [title], \"\");\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeSilvicultureAcresTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.Silviculture_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Silviculture: ' +\n\tText(round($feature.Silviculture_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + \"</span>\"\n}\n//\n// END EXECUTION\n\n",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Railroad",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeLineFeetTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n      if (value == '---no data---'){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n      }\n\t\t\tif (value > 5280) {\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(Round(value / 5280, 2), '###,###.00') + ' miles</td>');\n\t\t\t}\n      if (value < 5280) {\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + ' feet</td>');\n      }\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['Railroad_NetDesc_FeetSum','Railroad_TotalFeet']);\n\nif (IsEmpty($feature.Railroad_TotalFeet)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar output_tables = [];\n\nvar title_data_dict = Dictionary(\n\t\"Railway Type\", $feature.Railroad_NetDesc_FeetSum\n);\n\nfor (var title in title_data_dict) {\n\tvar field = DefaultValue(title_data_dict, [title], \"\");\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeLineFeetTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n}\n\nvar total_length = IIF(\n\t$feature.Railroad_TotalFeet > 5280,\n\tText(Round($feature.Railroad_TotalFeet / 5280, 2), '###,###.00') + ' Miles',\n\tText(Round($feature.Railroad_TotalFeet, 0),'###,###') + ' Feet'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Railroad: ' +\n\ttotal_length + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION\n\n",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Wind Turbines",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'WindTurb_FeatureCount',\n\t'WindTurb_ProjName_AttrCount',\n]); \n\nif (IsEmpty($feature.WindTurb_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Count by Project\", $feature.WindTurb_ProjName_AttrCount\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.WindTurb_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Wind Turbines: ' +\n\tText(round($feature.WindTurb_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Special Mgmt",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeSpecMgmtTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,['SpecMgmt_FeatureCount', 'SpecMgmt_Consid_AttrCount']); \n\nif (IsEmpty($feature.SpecMgmt_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Consideration Notes\", $feature.SpecMgmt_Consid_AttrCount,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeSpecMgmtTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.SpecMgmt_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Special Management Considerations: ' +\n\tText($feature.SpecMgmt_FeatureCount, '###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Aviation Facilities / Runways",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'Runway_FeatureCount',\n\t'Runway_LocID_AttrCount',\n\t'Runway_Ownership_AttrCount'\n]); \n\nif (IsEmpty($feature.Runway_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar loc_id_dict = Dictionary($feature.Runway_LocID_AttrCount);\nvar unique_loc_ids = 0;\nfor (var idx in loc_id_dict) {\n\t++unique_loc_ids\n};\n\nvar title_data_dict = Dictionary(\n\t\"Runway Ownership\", $feature.Runway_Ownership_AttrCount\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar runway_or_runways = IIF(\n\t$feature.Runway_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar facility_or_facilities = IIF(\n\tunique_loc_ids == 1,\n\t' (1 Individual Landing Facility)',\n\t' (Individual Landing Facilities: ' + unique_loc_ids + ')'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Runways: ' + Text(round($feature.Runway_FeatureCount, 0),'###,###') + runway_or_runways + facility_or_facilities +\n\t'</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    }
                ],
                "fieldInfos": [
                    {
                        "fieldName": "OBJECTID",
                        "isEditable": false,
                        "label": "OBJECTID",
                        "visible": false
                    },
                    {
                        "fieldName": "AkFireNumber",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "AkFireNumber",
                        "visible": true
                    },
                    {
                        "fieldName": "AkFireRegion",
                        "isEditable": true,
                        "label": "AkFireRegion",
                        "visible": true
                    },
                    {
                        "fieldName": "AkMine_Active_AttrCount",
                        "isEditable": true,
                        "label": "AkMine_Active_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "AkMine_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "AkMine_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "AkMine_Nearest",
                        "isEditable": true,
                        "label": "AkMine_Nearest",
                        "visible": true
                    },
                    {
                        "fieldName": "AkMine_Note_AttrCount",
                        "isEditable": true,
                        "label": "AkMine_Note_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "AkMine_Type_AttrCount",
                        "isEditable": true,
                        "label": "AkMine_Type_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "AkPowerLine_CondType_FeetSum",
                        "isEditable": true,
                        "label": "AkPowerLine_CondType_FeetSum",
                        "visible": true
                    },
                    {
                        "fieldName": "AkPowerLine_Nearest",
                        "isEditable": true,
                        "label": "AkPowerLine_Nearest",
                        "visible": true
                    },
                    {
                        "fieldName": "AkPowerLine_TotalFeet",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "AkPowerLine_TotalFeet",
                        "visible": true
                    },
                    {
                        "fieldName": "AkPowerLine_Voltage_FeetSum",
                        "isEditable": true,
                        "label": "AkPowerLine_Voltage_FeetSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Aksd_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Aksd_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Aksd_MainStruct_AttrSum",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Aksd_MainStruct_AttrSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Aksd_Nearest",
                        "isEditable": true,
                        "label": "Aksd_Nearest",
                        "visible": true
                    },
                    {
                        "fieldName": "Aksd_OtherStruct_AttrSum",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Aksd_OtherStruct_AttrSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Aksd_Protection_AttrCount",
                        "isEditable": true,
                        "label": "Aksd_Protection_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Aksd_SiteCat_AttrCount",
                        "isEditable": true,
                        "label": "Aksd_SiteCat_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "AnalysisBufferMiles",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "AnalysisBufferMiles",
                        "visible": true
                    },
                    {
                        "fieldName": "Community_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Community_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Community_Name_AttrCount",
                        "isEditable": true,
                        "label": "Community_Name_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Community_Nearest",
                        "isEditable": true,
                        "label": "Community_Nearest",
                        "visible": true
                    },
                    {
                        "fieldName": "ComsTwr_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "ComsTwr_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "ComsTwr_Nearest",
                        "isEditable": true,
                        "label": "ComsTwr_Nearest",
                        "visible": true
                    },
                    {
                        "fieldName": "ComsTwr_Type_AttrCount",
                        "isEditable": true,
                        "label": "ComsTwr_Type_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "DefaultLabel",
                        "isEditable": true,
                        "label": "DefaultLabel",
                        "visible": true
                    },
                    {
                        "fieldName": "FireActivityStatus",
                        "isEditable": true,
                        "label": "FireActivityStatus",
                        "visible": true
                    },
                    {
                        "fieldName": "GlobalID",
                        "isEditable": false,
                        "label": "GlobalID",
                        "visible": false
                    },
                    {
                        "fieldName": "HasError",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "HasError",
                        "visible": true
                    },
                    {
                        "fieldName": "Jurisd_Owner_AcreSum",
                        "isEditable": true,
                        "label": "Jurisd_Owner_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Jurisd_Unit_AcreSum",
                        "isEditable": true,
                        "label": "Jurisd_Unit_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "MgmtOption_AcreSum",
                        "isEditable": true,
                        "label": "MgmtOption_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "NpsStruct_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "NpsStruct_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "NpsStruct_Nearest",
                        "isEditable": true,
                        "label": "NpsStruct_Nearest",
                        "visible": true
                    },
                    {
                        "fieldName": "NpsStruct_Protection_AttrCount",
                        "isEditable": true,
                        "label": "NpsStruct_Protection_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "NpsStruct_Rating_AttrCount",
                        "isEditable": true,
                        "label": "NpsStruct_Rating_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "NpsStruct_Use_AttrCount",
                        "isEditable": true,
                        "label": "NpsStruct_Use_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "NtvAllot_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "NtvAllot_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "NtvAllot_Nearest",
                        "isEditable": true,
                        "label": "NtvAllot_Nearest",
                        "visible": true
                    },
                    {
                        "fieldName": "NtvAllot_Status_AcreSum",
                        "isEditable": true,
                        "label": "NtvAllot_Status_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "NtvAllot_TotalAcres",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "NtvAllot_TotalAcres",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_BuildingValue_AttrSum",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Parcel_BuildingValue_AttrSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Parcel_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_LandValue_AttrSum",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Parcel_LandValue_AttrSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_Nearest",
                        "isEditable": true,
                        "label": "Parcel_Nearest",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_PropType_AcreSum",
                        "isEditable": true,
                        "label": "Parcel_PropType_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_PropUse_AcreSum",
                        "isEditable": true,
                        "label": "Parcel_PropUse_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_TotalAcres",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Parcel_TotalAcres",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_TotalValue_AttrSum",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Parcel_TotalValue_AttrSum",
                        "visible": true
                    },
                    {
                        "fieldName": "PetrolTerm_Company_AttrCount",
                        "isEditable": true,
                        "label": "PetrolTerm_Company_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "PetrolTerm_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "PetrolTerm_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "PipeLine_Name_FeetSum",
                        "isEditable": true,
                        "label": "PipeLine_Name_FeetSum",
                        "visible": true
                    },
                    {
                        "fieldName": "PipeLine_Nearest",
                        "isEditable": true,
                        "label": "PipeLine_Nearest",
                        "visible": true
                    },
                    {
                        "fieldName": "PipeLine_TotalFeet",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "PipeLine_TotalFeet",
                        "visible": true
                    },
                    {
                        "fieldName": "PowerPlant_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "PowerPlant_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "PowerPlant_Nearest",
                        "isEditable": true,
                        "label": "PowerPlant_Nearest",
                        "visible": true
                    },
                    {
                        "fieldName": "PowerPlant_PrimSource_AttrCount",
                        "isEditable": true,
                        "label": "PowerPlant_PrimSource_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "PowerPlant_SectorName_AttrCount",
                        "isEditable": true,
                        "label": "PowerPlant_SectorName_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "PowerPlant_UtilName_AttrCount",
                        "isEditable": true,
                        "label": "PowerPlant_UtilName_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Railroad_Nearest",
                        "isEditable": true,
                        "label": "Railroad_Nearest",
                        "visible": true
                    },
                    {
                        "fieldName": "Railroad_NetDesc_FeetSum",
                        "isEditable": true,
                        "label": "Railroad_NetDesc_FeetSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Railroad_TotalFeet",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Railroad_TotalFeet",
                        "visible": true
                    },
                    {
                        "fieldName": "ReportedAcOverPerimAc",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "ReportedAcOverPerimAc",
                        "visible": true
                    },
                    {
                        "fieldName": "ReportedAcres",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "ReportedAcres",
                        "visible": true
                    },
                    {
                        "fieldName": "Runway_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Runway_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Runway_LocID_AttrCount",
                        "isEditable": true,
                        "label": "Runway_LocID_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Runway_Nearest",
                        "isEditable": true,
                        "label": "Runway_Nearest",
                        "visible": true
                    },
                    {
                        "fieldName": "Runway_Ownership_AttrCount",
                        "isEditable": true,
                        "label": "Runway_Ownership_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Shape__Area",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": false,
                        "label": "Shape__Area",
                        "visible": true
                    },
                    {
                        "fieldName": "Shape__Length",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": false,
                        "label": "Shape__Length",
                        "visible": true
                    },
                    {
                        "fieldName": "Silviculture_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Silviculture_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Silviculture_Nearest",
                        "isEditable": true,
                        "label": "Silviculture_Nearest",
                        "visible": true
                    },
                    {
                        "fieldName": "Silviculture_Status_AcreSum",
                        "isEditable": true,
                        "label": "Silviculture_Status_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Silviculture_TotalAcres",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Silviculture_TotalAcres",
                        "visible": true
                    },
                    {
                        "fieldName": "Silviculture_TotalValue_AttrSum",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Silviculture_TotalValue_AttrSum",
                        "visible": true
                    },
                    {
                        "fieldName": "SpecMgmt_Consid_AttrCount",
                        "isEditable": true,
                        "label": "SpecMgmt_Consid_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "SpecMgmt_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "SpecMgmt_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "SpecMgmt_Nearest",
                        "isEditable": true,
                        "label": "SpecMgmt_Nearest",
                        "visible": true
                    },
                    {
                        "fieldName": "UsaStruct_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "UsaStruct_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "UsaStruct_Nearest",
                        "isEditable": true,
                        "label": "UsaStruct_Nearest",
                        "visible": true
                    },
                    {
                        "fieldName": "UsaStruct_OccCls_AttrCount",
                        "isEditable": true,
                        "label": "UsaStruct_OccCls_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "UsaStruct_PrimOcc_AttrCount",
                        "isEditable": true,
                        "label": "UsaStruct_PrimOcc_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "UsaStruct_SecOcc_AttrCount",
                        "isEditable": true,
                        "label": "UsaStruct_SecOcc_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "WeatherStation_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "WeatherStation_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "WeatherStation_Name_AttrCount",
                        "isEditable": true,
                        "label": "WeatherStation_Name_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "WeatherStation_Nearest",
                        "isEditable": true,
                        "label": "WeatherStation_Nearest",
                        "visible": true
                    },
                    {
                        "fieldName": "wfigs_GISAcres",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "wfigs_GISAcres",
                        "visible": true
                    },
                    {
                        "fieldName": "wfigs_IncidentName",
                        "isEditable": true,
                        "label": "wfigs_IncidentName",
                        "visible": true
                    },
                    {
                        "fieldName": "wfigs_IrwinID",
                        "isEditable": true,
                        "label": "wfigs_IrwinID",
                        "visible": true
                    },
                    {
                        "fieldName": "wfigs_MapMethod",
                        "isEditable": true,
                        "label": "wfigs_MapMethod",
                        "visible": true
                    },
                    {
                        "fieldName": "wfigs_ModifiedOnDateTime_dt",
                        "isEditable": true,
                        "label": "wfigs_ModifiedOnDateTime_dt",
                        "visible": true
                    },
                    {
                        "fieldName": "wfigs_PolygonDateTime",
                        "isEditable": true,
                        "label": "wfigs_PolygonDateTime",
                        "visible": true
                    },
                    {
                        "fieldName": "WindTurb_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "WindTurb_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "WindTurb_Nearest",
                        "isEditable": true,
                        "label": "WindTurb_Nearest",
                        "visible": true
                    },
                    {
                        "fieldName": "WindTurb_ProjName_AttrCount",
                        "isEditable": true,
                        "label": "WindTurb_ProjName_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "AkMine_Interior",
                        "isEditable": true,
                        "label": "AkMine_Interior",
                        "visible": false
                    },
                    {
                        "fieldName": "AkPowerLine_Interior",
                        "isEditable": true,
                        "label": "AkPowerLine_Interior",
                        "visible": false
                    },
                    {
                        "fieldName": "Aksd_Interior",
                        "isEditable": true,
                        "label": "Aksd_Interior",
                        "visible": false
                    },
                    {
                        "fieldName": "ComsTwr_Interior",
                        "isEditable": true,
                        "label": "ComsTwr_Interior",
                        "visible": false
                    },
                    {
                        "fieldName": "Community_Interior",
                        "isEditable": true,
                        "label": "Community_Interior",
                        "visible": false
                    },
                    {
                        "fieldName": "NpsStruct_Interior",
                        "isEditable": true,
                        "label": "NpsStruct_Interior",
                        "visible": false
                    },
                    {
                        "fieldName": "NtvAllot_Interior",
                        "isEditable": true,
                        "label": "NtvAllot_Interior",
                        "visible": false
                    },
                    {
                        "fieldName": "Parcel_Interior",
                        "isEditable": true,
                        "label": "Parcel_Interior",
                        "visible": false
                    },
                    {
                        "fieldName": "PetrolTerm_Nearest",
                        "isEditable": true,
                        "label": "PetrolTerm_Nearest",
                        "visible": false
                    },
                    {
                        "fieldName": "PetrolTerm_Interior",
                        "isEditable": true,
                        "label": "PetrolTerm_Interior",
                        "visible": false
                    },
                    {
                        "fieldName": "PipeLine_Interior",
                        "isEditable": true,
                        "label": "PipeLine_Interior",
                        "visible": false
                    },
                    {
                        "fieldName": "PowerPlant_Interior",
                        "isEditable": true,
                        "label": "PowerPlant_Interior",
                        "visible": false
                    },
                    {
                        "fieldName": "Railroad_Interior",
                        "isEditable": true,
                        "label": "Railroad_Interior",
                        "visible": false
                    },
                    {
                        "fieldName": "Runway_Interior",
                        "isEditable": true,
                        "label": "Runway_Interior",
                        "visible": false
                    },
                    {
                        "fieldName": "Silviculture_Interior",
                        "isEditable": true,
                        "label": "Silviculture_Interior",
                        "visible": false
                    },
                    {
                        "fieldName": "SpecMgmt_Interior",
                        "isEditable": true,
                        "label": "SpecMgmt_Interior",
                        "visible": false
                    },
                    {
                        "fieldName": "UsaStruct_Interior",
                        "isEditable": true,
                        "label": "UsaStruct_Interior",
                        "visible": false
                    },
                    {
                        "fieldName": "WeatherStation_Interior",
                        "isEditable": true,
                        "label": "WeatherStation_Interior",
                        "visible": false
                    },
                    {
                        "fieldName": "WindTurb_Interior",
                        "isEditable": true,
                        "label": "WindTurb_Interior",
                        "visible": false
                    }
                ],
                "title": ""
            }
        },
        {
            "layerDefinition": {
                "defaultVisibility": true,
                "minScale": 12000000,
                "maxScale": 0,
                "drawingInfo": {
                    "renderer": {
                        "type": "simple",
                        "symbol": {
                            "type": "esriSFS",
                            "color": [
                                0,
                                0,
                                0,
                                0
                            ],
                            "outline": {
                                "type": "esriSLS",
                                "color": [
                                    255,
                                    71,
                                    71,
                                    255
                                ],
                                "width": 1.5,
                                "style": "esriSLSSolid"
                            },
                            "style": "esriSFSSolid"
                        }
                    }
                }
            },
            "id": 1,
            "popupInfo": {
                "popupElements": [
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "WFIGS Header",
                            "expression": "Expects($feature, [\n    'AkFireNumber',\n    'wfigs_IncidentName',\n    'wfigs_GISAcres',\n    'wfigs_MapMethod',\n    'wfigs_PolygonDateTime',\n    'wfigs_ModifiedOnDateTime_dt',\n    'wfigs_IrwinID',\n    'ReportedAcres',\n    'ReportedAcOverPerimAc'\n]); \n\nvar current_feat_irwin = $feature.wfigs_IrwinID;\n\nvar wfigs_locs_fset = FeatureSetByPortalItem(\n    Portal('https://nifc.maps.arcgis.com'),\n    '405814902c9e411cb4384c49d694e82b',\n    0, \n    // unused fields are commented out, may incorporate more fields as use-cases emerge.\n    [\n        'IrwinID',\n\n        'CpxName',\n\n        'DispatchCenterID',\n\n        'PercentContained',\n        'PercentPerimeterToBeContained',\n\n        //'PredominantFuelGroup',\n        //'PredominantFuelModel',\n        //'PrimaryFuelModel',\n        //'SecondaryFuelModel',\n\n        'FireMgmtComplexity',\n        'IncidentComplexityLevel',\n\n        //'WFDSSDecisionStatus',\n        'EstimatedCostToDate',\n        'TotalIncidentPersonnel',\n\n        //'POOPredictiveServiceAreaID', // use to hyperlink weather info somehow?\n        'POOProtectingAgency',\n        'POOJurisdictionalAgency',\n        'POOJurisdictionalUnit',\n\n        //'FireDiscoveryDateTime',\n\n        'ICS209ReportDateTime',\n        //'ICS209ReportForTimePeriodFrom',\n        //'ICS209ReportForTimePeriodTo',\n        'ICS209ReportStatus',\n        'IncidentManagementOrganization'\n    ],\n    false // do not return geometry\n);\n\nvar query = \"IrwinId = '\" + current_feat_irwin + \"'\";\n\nvar wfigs_loc_feat = First(Filter(wfigs_locs_fset, query));\n\nif (IsEmpty(wfigs_loc_feat)) {\n    return {\n        type : 'text', \n        text : 'System Information Error. Unable to query WFIGS source for additional attributes.'\n    }\n};\n\n//REGION title\n\nvar fire_number = Text($feature.AkFireNumber, '000');\n\nvar title_name = IIF(\n    IsEmpty(wfigs_loc_feat.CpxName),\n    fire_number + '-' + $feature.wfigs_IncidentName,\n    fire_number + '-' + $feature.wfigs_IncidentName + ' (' + wfigs_loc_feat.CpxName +  ' Complex) '\n);\n\nvar info_last_updated = 'Information Last Updated: ' + \n    Text(ChangeTimeZone(Date($feature.wfigs_ModifiedOnDateTime_dt), 'America/Anchorage'), 'MMMM DD, HH:mm') +\n    ' Alaska Time' + '<br>';\n\nvar status = 'Status: ' + $feature.FireActivityStatus;\n//ENDREGION\n\n//REGION acres\nvar reported_acres = 'Reported Acres: ' + $feature.ReportedAcres;\n\nif (IsEmpty($feature.wfigs_GISAcres)) {\n    var acres_info = reported_acres;\n} else {\n    var poly_dt = IIf(\n        IsEmpty($feature.wfigs_PolygonDateTime),\n        'Perimeter mapped on unknown date/time.' + '<br>',\n        'Perimeter Mapped on ' +\n            Text(ChangeTimeZone(Date($feature.wfigs_PolygonDateTime), 'America/Anchorage'), 'MMMM DD, HH:mm') +\n            ' Alaska Time' + '<br>'\n    );\n    var poly_map_method = IIf(\n        IsEmpty($feature.wfigs_MapMethod),\n        'Map Method: Unknown',\n        'Map Method: ' + $feature.wfigs_MapMethod\n    );\n    var perimeter_intel = poly_dt + \n        'Calculated Acres: ' + Text(Round($feature.wfigs_GISAcres,2),'###,###') + '<br>' +\n        poly_map_method;\n    var acres_info = perimeter_intel;\n};\n\nif ($feature.ReportedAcOverPerimAc == 1) {\n    var acres_info = reported_acres + '<br><br>' + perimeter_intel\n}\n\n//ENDREGION\n\n//REGION dispatch center & region\nvar center = IIF(\n    IsEmpty(wfigs_loc_feat.DispatchCenterID),\n    null,\n    'Local Dispatch Center: ' + \n        Replace(wfigs_loc_feat.DispatchCenterID, 'AK', '') + '<br>'\n);\n\nvar region = IIF(\n    IsEmpty($feature.AkFireRegion),\n    null,\n    'AK Fire Region: ' + $feature.AkFireRegion\n);\n\n//REGION personnel, cost, containment\nvar personnel = IIF(\n    IsEmpty(wfigs_loc_feat.TotalIncidentPersonnel),\n    null,\n    'Total Incident Personnel: ' + Text(wfigs_loc_feat.TotalIncidentPersonnel, '###,###') + '<br>'\n);\n\nvar cost = IIF(\n    IsEmpty(wfigs_loc_feat.EstimatedCostToDate),\n    null,\n    'Estimated Cost to Date: ' + Text(wfigs_loc_feat.EstimatedCostToDate, '$###,###') + '<br>'\n);\n\nvar containment = IIF(\n    IsEmpty(wfigs_loc_feat.PercentContained),\n    null,\n    'Percent Contained: ' + wfigs_loc_feat.PercentContained + '%' + '<br>'\n    );\n\nvar to_be_contained = IIF(\n    IsEmpty(wfigs_loc_feat.PercentPerimeterToBeContained),\n    null,\n    'Percent to be Contained: ' + wfigs_loc_feat.PercentPerimeterToBeContained + '%' + '<br>'\n    );\n\nvar region_prs_cst_cnt_empty = IIF(\n    (IsEmpty(personnel) && IsEmpty(cost) && IsEmpty(containment) && IsEmpty(to_be_contained)),\n    'Personnel, Cost, and Containment Information Unavailable at this Time.' + '<br>',\n    null\n);\n//ENDREGION\n\n//REGION POO\nvar poo_protecting_agency = IIF(\n    IsEmpty(wfigs_loc_feat.POOProtectingAgency),\n    null,\n    'POO Protecting Agency: ' + wfigs_loc_feat.POOProtectingAgency + '<br>'\n);\n\nvar poo_jurisdictional_agency = IIF(\n    IsEmpty(wfigs_loc_feat.POOJurisdictionalAgency),\n    null,\n    'POO Jurisdictional Agency: ' + wfigs_loc_feat.POOJurisdictionalAgency + '<br>'\n);\n\nvar poo_jurisdictional_unit = IIF(\n    IsEmpty(wfigs_loc_feat.POOJurisdictionalUnit),\n    null,\n    'POO Jurisdictional Unit: ' + wfigs_loc_feat.POOJurisdictionalUnit + '<br>'\n);\n\nvar region_poo_empty = IIF(\n    (IsEmpty(poo_protecting_agency) && IsEmpty(poo_jurisdictional_agency) && IsEmpty(poo_jurisdictional_unit)),\n    'Point of Origin Land Management Information Unavailable at this Time.' + '<br>',\n    null\n);\n//ENDREGION\n\n//REGION IMT and 209\nvar managegement_org = IIF(\n    IsEmpty(wfigs_loc_feat.IncidentManagementOrganization),\n    null,\n    'Incident Management Organization: ' + wfigs_loc_feat.IncidentManagementOrganization + '<br>'\n);\n\nvar fire_mgmt_complexity = IIF(\n    IsEmpty(wfigs_loc_feat.FireMgmtComplexity),\n    null,\n    'Fire Management Complexity: ' + wfigs_loc_feat.FireMgmtComplexity + '<br>'\n);\n\nvar incident_complexity_level = IIF(\n    IsEmpty(wfigs_loc_feat.IncidentComplexityLevel),\n    null,\n    'Incident Complexity Level: ' + wfigs_loc_feat.IncidentComplexityLevel + '<br>'\n);\n\nvar status_209 = IIF(\n    IsEmpty(wfigs_loc_feat.ICS209ReportStatus),\n    null,\n    'ICS 209 Report Status: ' + wfigs_loc_feat.ICS209ReportStatus + '<br>'\n);\n\nvar last_209 = IIF(\n    IsEmpty(wfigs_loc_feat.ICS209ReportDateTime),\n    null,\n    'ICS 209 Report Date/Time: ' + Text(ChangeTimeZone(Date(wfigs_loc_feat.ICS209ReportDateTime), 'America/Anchorage'), 'MMMM DD, HH:mm') + ' Alaska Time' + '<br>'\n);\n\nvar region_imt_209_empty = IIF(\n    (IsEmpty(managegement_org) && IsEmpty(fire_mgmt_complexity) && IsEmpty(incident_complexity_level) && IsEmpty(status_209) && IsEmpty(last_209)),\n    'Incident Complexity & 209 Information Unavailable at this Time.' + '<br>',\n    null\n);\n//ENDREGION\n\nvar popup_header_html = '<span style=\"font-size: 16px; color: red\">' + //REGION title\n\t'<strong>' + title_name + '</strong>' + '<br>' +\n    '<i>' + info_last_updated +\n    status + '<i/></span>' + \n    '<hr style=\"border: 1px solid black;\">' + \n    '<span style=\"font-size: 14px; color: red\">' + //REGION acres\n    '<i>' + acres_info + '</i>' + '<br>' + \n    '<hr style=\"border: 1px solid black;\">' + \n    '<details><summary><strong>Click To Expand Incident Details</strong></summary>' + //REGION BEGIN DROP-DOWN\n    '<hr style=\"border: 1px solid black;\">' + \n    '<span style=\"font-size: 14px; color: red; line-height: 1.5\">' + //REGION dispatch center & region\n    center +\n    region + '</span>' +\n\t'<hr style=\"border: 1px solid black;\">' +\n    '<span style=\"font-size: 14px; color: red; line-height: 1.5\">' + //REGION personnel, cost, containment\n    containment +\n    to_be_contained + \n    personnel +\n    cost + \n    region_prs_cst_cnt_empty + '</span>' +\n\t'<hr style=\"border: 1px solid black;\">' +\n    '<span style=\"font-size: 14px; color: red; line-height: 1.5\">' + //REGION POO\n    poo_protecting_agency +\n    poo_jurisdictional_agency +\n    poo_jurisdictional_unit +\n    region_poo_empty + '</span>' +\n\t'<hr style=\"border: 1px solid black;\">' +\n    '<span style=\"font-size: 14px; color: red; line-height: 1.5\">' + //REGION management\n    managegement_org +\n    fire_mgmt_complexity +\n    incident_complexity_level +\n    status_209 +\n    last_209 + \n    region_imt_209_empty + '</span>' +\n\t'<hr style=\"border: 1px solid black;\">'\n\nreturn { \n\ttype : 'text', \n\ttext : popup_header_html\n}",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "land management",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction sumDictValues(attrDict) {\n\tvar total_value = 0; \n\tfor (var key in attrDict) { \n\t\ttotal_value += attrDict[key];\n\t}\n\treturn total_value;\n}\n\nfunction writeLandManagementTableArray(sorted_dicts_array, total_value) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###.0') + ' acres -- ' + Round((value/total_value) * 100, 2) + ' %' + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['DefaultLabel', 'MgmtOption_AcreSum', 'Jurisd_Owner_AcreSum', 'Jurisd_Unit_AcreSum']);\nvar output_tables = [];\nvar title_data_dict = Dictionary(\n\t\"Fire Management Options\", $feature.MgmtOption_AcreSum,\n\t\"Jurisdictional Ownership\", $feature.Jurisd_Owner_AcreSum,\n\t\"Jurisdictional Unit\", $feature.Jurisd_Unit_AcreSum\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar total_value = sumDictValues(attrDict);\n\tvar html_rows_array = writeLandManagementTableArray(sorted_dicts_array, total_value);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar geom_class = Split($feature.DefaultLabel, ',', 2)[1];\n\nvar summary_main_head = '<div style=\"text-align: center; margin: 0; padding: 0;\">' + \n    '<span style=\"font-size: 16px; font-weight: bold; display: inline-block;\">' + \n    'Values-at-Risk Summary,' + geom_class +\n    '</span>' + \n    '<hr style=\"border: 2px solid black; width: 80%; margin: 0; padding: 0;\">' +\n    '</div>';\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Land Management Acreage Breakdowns</strong><details><summary><i>click to expand</i></summary><br>';\nreturn { \n\ttype : 'text', \n\ttext : summary_main_head + section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n};\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Communities",
                            "expression": "// START EXECUTION\n//\nExpects($feature,[\n\t'Community_FeatureCount',\n\t'Community_Name_AttrCount',\n]); \n\nif (IsEmpty($feature.Community_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar field_dict = Dictionary($feature.Community_Name_AttrCount);\n\nvar communities = [];\n\nfor (var key in field_dict) {\n    Push(communities, '<tr><td width=\"100%\">' + key + '</td>');\n};\n\nvar feat_or_feats = IIF(\n\t$feature.Community_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Communities: ' +\n\tText(round($feature.Community_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + '<table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +  Concatenate(communities, '</tr>') + \"</table></span>\"\n};\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "USA Structures",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'UsaStruct_FeatureCount',\n\t'UsaStruct_OccCls_AttrCount',\n\t'UsaStruct_PrimOcc_AttrCount',\n\t'UsaStruct_SecOcc_AttrCount',\n]); \n\nif (IsEmpty($feature.UsaStruct_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Structures Occupational Class\", $feature.UsaStruct_OccCls_AttrCount,\n\t\"Structures Primary Occupation\", $feature.UsaStruct_PrimOcc_AttrCount,\n\t\"Structures Secondary Occupation\", $feature.UsaStruct_SecOcc_AttrCount\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.UsaStruct_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>USA Structures: ' +\n\tText(round($feature.UsaStruct_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n};\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "AKSD",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'Aksd_FeatureCount',\n\t'Aksd_MainStruct_AttrSum',\n\t'Aksd_OtherStruct_AttrSum',\n\t'Aksd_Protection_AttrCount',\n\t'Aksd_SiteCat_AttrCount'\n]);\n\nif (IsEmpty($feature.Aksd_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar main_structs = IIF(\n    IsEmpty($feature.Aksd_MainStruct_AttrSum),\n    '---no data---',\n    $feature.Aksd_MainStruct_AttrSum\n);\n\nvar other_structs = IIF(\n    IsEmpty($feature.Aksd_OtherStruct_AttrSum),\n    '---no data---',\n    $feature.Aksd_OtherStruct_AttrSum\n);\n\nvar counted_structs_attrDict = IIF(\n    main_structs == '---no data---' && other_structs == '---no data---',\n    Dictionary('---no data---', '---no data---'),\n    Dictionary(\n    'Main Structures', $feature.Aksd_MainStruct_AttrSum,\n    'Other Structures', $feature.Aksd_OtherStruct_AttrSum\n    )\n);\n\nvar title_data_dict = Dictionary(\n\t\"Counted Structures\", counted_structs_attrDict,\n\t\"Site Category Breakdown\", makeAttrDict($feature.Aksd_SiteCat_AttrCount),\n\t\"Site Protection Level Breakdown\", makeAttrDict($feature.Aksd_Protection_AttrCount)\n);\n\nfor (var title in title_data_dict) {\n\tvar attrDict = title_data_dict[title];\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array)\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.Aksd_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Alaska Known Sites Database: ' +\n\tText(round($feature.Aksd_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "NPS Structures",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'NpsStruct_FeatureCount',\n\t'NpsStruct_Use_AttrCount',\n\t'NpsStruct_Protection_AttrCount',\n\t'NpsStruct_Rating_AttrCount',\n]); \n\nif (IsEmpty($feature.NpsStruct_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Structure Use\", $feature.NpsStruct_Use_AttrCount,\n\t\"Structure Protection Level\", $feature.NpsStruct_Protection_AttrCount,\n\t\"Structure Wildfire Risk Rating\", $feature.NpsStruct_Rating_AttrCount\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.NpsStruct_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>NPS Structures: ' +\n\tText(round($feature.NpsStruct_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n};\n//\n// END EXECUTION\n",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Parcels",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeParcelAcresTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (value == '---no data---'){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + value + '</td>');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!IsEmpty(value)){\n\t\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###.0') + ' acres</td>');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\nfunction writeParcelValuesTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (value == \"---no data---\"){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + value + ' </td>');\n\t\t\t} \n\t\t\telse {\n\t\t\t\t// NOTE THE USE OF *1 HERE. value IS ALREADY TYPE TEXT.\n\t\t\t\tif (!IsEmpty(value)){\n\t\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value*1, '$###,###') + ' USD</td>');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['Parcel_BuildingValue_AttrSum','Parcel_LandValue_AttrSum','Parcel_TotalValue_AttrSum','Parcel_PropType_AcreSum','Parcel_PropUse_AcreSum','Parcel_FeatureCount']);\n\nif (IsEmpty($feature.Parcel_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar output_tables = [];\n\nvar build_val = IIF(\n    IsEmpty($feature.Parcel_BuildingValue_AttrSum) || $feature.Parcel_BuildingValue_AttrSum == 0,\n    '---no data---',\n    $feature.Parcel_BuildingValue_AttrSum\n);\n\nvar land_val = IIF(\n    IsEmpty($feature.Parcel_LandValue_AttrSum) || $feature.Parcel_LandValue_AttrSum == 0,\n    '---no data---',\n    $feature.Parcel_LandValue_AttrSum\n);\n\nvar tot_val = IIF(\n    IsEmpty($feature.Parcel_TotalValue_AttrSum) || $feature.Parcel_TotalValue_AttrSum == 0,\n    '---no data---',\n    $feature.Parcel_TotalValue_AttrSum\n);\n\nvar pval_attrDict = IIF(\n    build_val == '---no data---' && land_val == '---no data---' && tot_val == '---no data---',\n    Dictionary(\n        '---no data---', '---no data---',\n    ),\n    Dictionary(\n\t\"Parcel Building Value\", build_val,\n\t\"Parcel Land Value\", land_val,\n\t\"Parcel Total Value\", tot_val\n    )\n);\n\nvar sorted_pvalDict_array = sortDict(pval_attrDict);\nvar pval_html_rows_array = writeParcelValuesTableArray(sorted_pvalDict_array);\nvar pval_html_table = formatTable(pval_html_rows_array, \"Parcel Values\");\nPush(output_tables, pval_html_table);\n\nvar title_data_dict = Dictionary(\n\t\"Parcel Type Acreage Breakdown\", $feature.Parcel_PropType_AcreSum,\n\t\"Parcel Use Acreage Breakdown\", $feature.Parcel_PropUse_AcreSum\n);\n\nfor (var title in title_data_dict) {\n\tvar field = DefaultValue(title_data_dict, [title], \"\");\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeParcelAcresTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.Parcel_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Land Parcels: ' +\n\tText(round($feature.Parcel_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n};\n//\n// END EXECUTION\n\n",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Allotments",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeAllotmentAcresTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###.0') + ' acres</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['NtvAllot_Status_AcreSum','NtvAllot_FeatureCount']);\n\nif (IsEmpty($feature.NtvAllot_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar output_tables = [];\n\nvar title_data_dict = Dictionary(\n\t\"Allotment Status Acreage Breakdown\", $feature.NtvAllot_Status_AcreSum,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = DefaultValue(title_data_dict, [title], \"\");\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeAllotmentAcresTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.NtvAllot_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Native Allotments: ' +\n\tText(round($feature.NtvAllot_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n};\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Powerlines",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeLineFeetTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n      if (value == '---no data---'){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n      }\n\t\t\tif (value > 5280) {\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(Round(value / 5280, 2), '###,###.00') + ' miles</td>');\n\t\t\t}\n      if (value < 5280) {\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + ' feet</td>');\n      }\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['AkPowerLine_CondType_FeetSum','AkPowerLine_Voltage_FeetSum','AkPowerLine_TotalFeet']);\n\nif (IsEmpty($feature.AkPowerLine_TotalFeet)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar output_tables = [];\n\nvar title_data_dict = Dictionary(\n\t\"Powerline Types\", $feature.AkPowerLine_CondType_FeetSum,\n\t\"Powerline Voltages\", $feature.AkPowerLine_Voltage_FeetSum\n);\n\nfor (var title in title_data_dict) {\n\tvar field = DefaultValue(title_data_dict, [title], \"\");\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeLineFeetTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n}\n\nvar total_length = IIF(\n\t$feature.AkPowerLine_TotalFeet > 5280,\n\tText(Round($feature.AkPowerLine_TotalFeet / 5280, 2), '###,###.00') + ' Miles',\n\tText(Round($feature.AkPowerLine_TotalFeet, 0),'###,###') + ' Feet'\n)\n\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Powerlines: ' +\n\ttotal_length + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + \"</span>\"\n}\n//\n// END EXECUTION\n\n",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Powerplants",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n    'PowerPlant_FeatureCount',\n    'PowerPlant_PrimSource_AttrCount',\n    'PowerPlant_SectorName_AttrCount',\n    'PowerPlant_UtilName_AttrCount'\n]); \n\nif (IsEmpty($feature.PowerPlant_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Primary Power Source\", $feature.PowerPlant_PrimSource_AttrCount,\n\t\"Sector Name\", $feature.PowerPlant_SectorName_AttrCount,\n\t\"Utility Name\", $feature.PowerPlant_UtilName_AttrCount,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.PowerPlant_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Powerplants: ' +\n\tText(round($feature.PowerPlant_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Communications Sites",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'ComsTwr_FeatureCount',\n\t'ComsTwr_Type_AttrCount',\n]); \n\nif (IsEmpty($feature.ComsTwr_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Site Type\", $feature.ComsTwr_Type_AttrCount,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.ComsTwr_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Communications Sites: ' +\n\tText(round($feature.ComsTwr_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Weather Stations",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'WeatherStation_FeatureCount',\n\t'WeatherStation_Name_AttrCount',\n]); \n\nif (IsEmpty($feature.WeatherStation_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Station Type\", $feature.WeatherStation_Name_AttrCount,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.WeatherStation_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Weather Stations: ' +\n\tText(round($feature.WeatherStation_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Pipelines",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeLineFeetTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n      if (value == '---no data---'){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n      }\n\t\t\tif (value > 5280) {\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(Round(value / 5280, 2), '###,###.00') + ' miles</td>');\n\t\t\t}\n      if (value < 5280) {\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + ' feet</td>');\n      }\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['PipeLine_TotalFeet','PipeLine_Name_FeetSum']);\n\nif (IsEmpty($feature.Pipeline_TotalFeet)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar output_tables = [];\n\nvar title_data_dict = Dictionary(\n\t\"Pipelines by Name\", $feature.PipeLine_Name_FeetSum\n);\n\nfor (var title in title_data_dict) {\n\tvar field = DefaultValue(title_data_dict, [title], \"\");\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeLineFeetTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n}\n\nvar total_length = IIF(\n\t$feature.PipeLine_TotalFeet > 5280,\n\tText(Round($feature.PipeLine_TotalFeet / 5280, 2), '###,###.00') + ' Miles',\n\tText(Round($feature.PipeLine_TotalFeet, 0),'###,###') + ' Feet'\n)\n\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Pipelines: ' +\n\ttotal_length + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION\n\n",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Petrol Terminal",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n    'PetrolTerm_FeatureCount',\n    'PetrolTerm_Company_AttrCount'\n]); \n\nif (IsEmpty($feature.PetrolTerm_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Company Name\", $feature.PetrolTerm_Company_AttrCount,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.PetrolTerm_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Petrol Terminals: ' +\n\tText(round($feature.PetrolTerm_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Mines",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n    'AkMine_Note_AttrCount',\n    'AkMine_Type_AttrCount',\n    'AkMine_FeatureCount',\n\t\t'AkMine_Active_AttrCount'\n]); \n\nif (IsEmpty($feature.AkMine_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar active_attr_dict_raw = makeAttrDict($feature.AkMine_Active_AttrCount);\n\nvar rename_active_bool = Dictionary(\n\t'0', 'No',\n\t'1', 'Yes'\n);\n\nvar active_attr_dict = Dictionary()\nfor (var key in active_attr_dict_raw) {\n\tvar new_key = rename_active_bool[key]\n\tactive_attr_dict[new_key] = active_attr_dict_raw[key]\n};\n\nvar title_data_dict = Dictionary(\n\t\"Active Status\", active_attr_dict,\n\t\"Mine Ownership\", makeAttrDict($feature.AkMine_Note_AttrCount),\n  \"Mine Type\", makeAttrDict($feature.AkMine_Type_AttrCount)\n);\n\nfor (var title in title_data_dict) {\n\tvar attrDict = title_data_dict[title];\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.AkMine_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Mines: ' +\n\tText(round($feature.AkMine_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Silviculture",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeSilvicultureAcresTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (value == '---no data---'){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + value + '</td>');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!IsEmpty(value)){\n\t\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###.0') + ' acres</td>');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\nfunction writeSilvicultureValuesTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (value == \"---no data---\"){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + value + ' </td>');\n\t\t\t} \n\t\t\telse {\n\t\t\t\tif (!IsEmpty(value)){\n\t\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '$###,###') + ' USD</td>');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['Silviculture_FeatureCount','Silviculture_Status_AcreSum','Silviculture_TotalValue_AttrSum','Silviculture_TotalAcres']);\n\nif (IsEmpty($feature.Silviculture_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar output_tables = [];\n\nvar silvi_val = IIF(\n    IsEmpty($feature.Silviculture_TotalValue_AttrSum),\n    '---no data---',\n    $feature.Silviculture_TotalValue_AttrSum\n);\n\nvar silvi_val_attrDict = Dictionary(\"Silviculture Estimated Value\", silvi_val);\n\nvar silvi_acres = IIF(\n    IsEmpty($feature.Silviculture_TotalAcres),\n    '---no data---',\n    $feature.Silviculture_TotalAcres\n);\n\nvar silvi_acres_attrDict = Dictionary(\"Silviculture Total Acres\", silvi_acres);\n\nvar sivli_val_html_rows_array = writeSilvicultureValuesTableArray([silvi_val_attrDict]);\n\nvar silvi_acres_html_rows_array = writeSilvicultureAcresTableArray([silvi_acres_attrDict]);\n\nvar silvi_totals_html_rows_array = Splice(\n    silvi_acres_html_rows_array,\n    sivli_val_html_rows_array\n)\n\nvar silvi_totals_table = formatTable(silvi_totals_html_rows_array, \"Silviculture Acreage & Estimated Value\");\nPush(output_tables, silvi_totals_table);\n\nvar title_data_dict = Dictionary(\n\t\"Silviculture Status Acreage Breakdown\", $feature.Silviculture_Status_AcreSum,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = DefaultValue(title_data_dict, [title], \"\");\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeSilvicultureAcresTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.Silviculture_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Silviculture: ' +\n\tText(round($feature.Silviculture_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + \"</span>\"\n}\n//\n// END EXECUTION\n\n",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Railroad",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeLineFeetTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n      if (value == '---no data---'){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n      }\n\t\t\tif (value > 5280) {\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(Round(value / 5280, 2), '###,###.00') + ' miles</td>');\n\t\t\t}\n      if (value < 5280) {\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + ' feet</td>');\n      }\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['Railroad_NetDesc_FeetSum','Railroad_TotalFeet']);\n\nif (IsEmpty($feature.Railroad_TotalFeet)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar output_tables = [];\n\nvar title_data_dict = Dictionary(\n\t\"Railway Type\", $feature.Railroad_NetDesc_FeetSum\n);\n\nfor (var title in title_data_dict) {\n\tvar field = DefaultValue(title_data_dict, [title], \"\");\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeLineFeetTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n}\n\nvar total_length = IIF(\n\t$feature.Railroad_TotalFeet > 5280,\n\tText(Round($feature.Railroad_TotalFeet / 5280, 2), '###,###.00') + ' Miles',\n\tText(Round($feature.Railroad_TotalFeet, 0),'###,###') + ' Feet'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Railroad: ' +\n\ttotal_length + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION\n\n",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Wind Turbines",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'WindTurb_FeatureCount',\n\t'WindTurb_ProjName_AttrCount',\n]); \n\nif (IsEmpty($feature.WindTurb_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Count by Project\", $feature.WindTurb_ProjName_AttrCount\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.WindTurb_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Wind Turbines: ' +\n\tText(round($feature.WindTurb_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Special Mgmt",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeSpecMgmtTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,['SpecMgmt_FeatureCount', 'SpecMgmt_Consid_AttrCount']); \n\nif (IsEmpty($feature.SpecMgmt_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Consideration Notes\", $feature.SpecMgmt_Consid_AttrCount,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeSpecMgmtTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.SpecMgmt_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Special Management Considerations: ' +\n\tText($feature.SpecMgmt_FeatureCount, '###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Aviation Facilities / Runways",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'Runway_FeatureCount',\n\t'Runway_LocID_AttrCount',\n\t'Runway_Ownership_AttrCount'\n]); \n\nif (IsEmpty($feature.Runway_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar loc_id_dict = Dictionary($feature.Runway_LocID_AttrCount);\nvar unique_loc_ids = 0;\nfor (var idx in loc_id_dict) {\n\t++unique_loc_ids\n};\n\nvar title_data_dict = Dictionary(\n\t\"Runway Ownership\", $feature.Runway_Ownership_AttrCount\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar runway_or_runways = IIF(\n\t$feature.Runway_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar facility_or_facilities = IIF(\n\tunique_loc_ids == 1,\n\t' (1 Individual Landing Facility)',\n\t' (Individual Landing Facilities: ' + unique_loc_ids + ')'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Runways: ' + Text(round($feature.Runway_FeatureCount, 0),'###,###') + runway_or_runways + facility_or_facilities +\n\t'</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    }
                ],
                "fieldInfos": [
                    {
                        "fieldName": "OBJECTID",
                        "isEditable": false,
                        "label": "OBJECTID",
                        "visible": false
                    },
                    {
                        "fieldName": "AkFireNumber",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "AkFireNumber",
                        "visible": true
                    },
                    {
                        "fieldName": "AkFireRegion",
                        "isEditable": true,
                        "label": "AkFireRegion",
                        "visible": true
                    },
                    {
                        "fieldName": "AkMine_Active_AttrCount",
                        "isEditable": true,
                        "label": "AkMine_Active_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "AkMine_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "AkMine_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "AkMine_Note_AttrCount",
                        "isEditable": true,
                        "label": "AkMine_Note_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "AkMine_Type_AttrCount",
                        "isEditable": true,
                        "label": "AkMine_Type_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "AkPowerLine_CondType_FeetSum",
                        "isEditable": true,
                        "label": "AkPowerLine_CondType_FeetSum",
                        "visible": true
                    },
                    {
                        "fieldName": "AkPowerLine_TotalFeet",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "AkPowerLine_TotalFeet",
                        "visible": true
                    },
                    {
                        "fieldName": "AkPowerLine_Voltage_FeetSum",
                        "isEditable": true,
                        "label": "AkPowerLine_Voltage_FeetSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Aksd_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Aksd_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Aksd_MainStruct_AttrSum",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Aksd_MainStruct_AttrSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Aksd_OtherStruct_AttrSum",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Aksd_OtherStruct_AttrSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Aksd_Protection_AttrCount",
                        "isEditable": true,
                        "label": "Aksd_Protection_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Aksd_SiteCat_AttrCount",
                        "isEditable": true,
                        "label": "Aksd_SiteCat_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "AnalysisBufferMiles",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "AnalysisBufferMiles",
                        "visible": true
                    },
                    {
                        "fieldName": "Community_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Community_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Community_Name_AttrCount",
                        "isEditable": true,
                        "label": "Community_Name_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "ComsTwr_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "ComsTwr_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "ComsTwr_Type_AttrCount",
                        "isEditable": true,
                        "label": "ComsTwr_Type_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "DefaultLabel",
                        "isEditable": true,
                        "label": "DefaultLabel",
                        "visible": true
                    },
                    {
                        "fieldName": "FireActivityStatus",
                        "isEditable": true,
                        "label": "FireActivityStatus",
                        "visible": true
                    },
                    {
                        "fieldName": "GlobalID",
                        "isEditable": false,
                        "label": "GlobalID",
                        "visible": false
                    },
                    {
                        "fieldName": "HasError",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "HasError",
                        "visible": true
                    },
                    {
                        "fieldName": "Jurisd_Owner_AcreSum",
                        "isEditable": true,
                        "label": "Jurisd_Owner_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Jurisd_Unit_AcreSum",
                        "isEditable": true,
                        "label": "Jurisd_Unit_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "MgmtOption_AcreSum",
                        "isEditable": true,
                        "label": "MgmtOption_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "NpsStruct_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "NpsStruct_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "NpsStruct_Protection_AttrCount",
                        "isEditable": true,
                        "label": "NpsStruct_Protection_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "NpsStruct_Rating_AttrCount",
                        "isEditable": true,
                        "label": "NpsStruct_Rating_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "NpsStruct_Use_AttrCount",
                        "isEditable": true,
                        "label": "NpsStruct_Use_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "NtvAllot_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "NtvAllot_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "NtvAllot_Status_AcreSum",
                        "isEditable": true,
                        "label": "NtvAllot_Status_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "NtvAllot_TotalAcres",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "NtvAllot_TotalAcres",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_BuildingValue_AttrSum",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Parcel_BuildingValue_AttrSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Parcel_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_LandValue_AttrSum",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Parcel_LandValue_AttrSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_PropType_AcreSum",
                        "isEditable": true,
                        "label": "Parcel_PropType_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_PropUse_AcreSum",
                        "isEditable": true,
                        "label": "Parcel_PropUse_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_TotalAcres",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Parcel_TotalAcres",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_TotalValue_AttrSum",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Parcel_TotalValue_AttrSum",
                        "visible": true
                    },
                    {
                        "fieldName": "PetrolTerm_Company_AttrCount",
                        "isEditable": true,
                        "label": "PetrolTerm_Company_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "PetrolTerm_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "PetrolTerm_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "PipeLine_Name_FeetSum",
                        "isEditable": true,
                        "label": "PipeLine_Name_FeetSum",
                        "visible": true
                    },
                    {
                        "fieldName": "PipeLine_TotalFeet",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "PipeLine_TotalFeet",
                        "visible": true
                    },
                    {
                        "fieldName": "PowerPlant_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "PowerPlant_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "PowerPlant_PrimSource_AttrCount",
                        "isEditable": true,
                        "label": "PowerPlant_PrimSource_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "PowerPlant_SectorName_AttrCount",
                        "isEditable": true,
                        "label": "PowerPlant_SectorName_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "PowerPlant_UtilName_AttrCount",
                        "isEditable": true,
                        "label": "PowerPlant_UtilName_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Railroad_NetDesc_FeetSum",
                        "isEditable": true,
                        "label": "Railroad_NetDesc_FeetSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Railroad_TotalFeet",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Railroad_TotalFeet",
                        "visible": true
                    },
                    {
                        "fieldName": "ReportedAcOverPerimAc",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "ReportedAcOverPerimAc",
                        "visible": true
                    },
                    {
                        "fieldName": "ReportedAcres",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "ReportedAcres",
                        "visible": true
                    },
                    {
                        "fieldName": "Runway_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Runway_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Runway_LocID_AttrCount",
                        "isEditable": true,
                        "label": "Runway_LocID_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Runway_Ownership_AttrCount",
                        "isEditable": true,
                        "label": "Runway_Ownership_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Shape__Area",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": false,
                        "label": "Shape__Area",
                        "visible": true
                    },
                    {
                        "fieldName": "Shape__Length",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": false,
                        "label": "Shape__Length",
                        "visible": true
                    },
                    {
                        "fieldName": "Silviculture_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Silviculture_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Silviculture_Status_AcreSum",
                        "isEditable": true,
                        "label": "Silviculture_Status_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Silviculture_TotalAcres",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Silviculture_TotalAcres",
                        "visible": true
                    },
                    {
                        "fieldName": "Silviculture_TotalValue_AttrSum",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Silviculture_TotalValue_AttrSum",
                        "visible": true
                    },
                    {
                        "fieldName": "SpecMgmt_Consid_AttrCount",
                        "isEditable": true,
                        "label": "SpecMgmt_Consid_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "SpecMgmt_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "SpecMgmt_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "UsaStruct_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "UsaStruct_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "UsaStruct_OccCls_AttrCount",
                        "isEditable": true,
                        "label": "UsaStruct_OccCls_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "UsaStruct_PrimOcc_AttrCount",
                        "isEditable": true,
                        "label": "UsaStruct_PrimOcc_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "UsaStruct_SecOcc_AttrCount",
                        "isEditable": true,
                        "label": "UsaStruct_SecOcc_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "WeatherStation_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "WeatherStation_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "WeatherStation_Name_AttrCount",
                        "isEditable": true,
                        "label": "WeatherStation_Name_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "wfigs_GISAcres",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "wfigs_GISAcres",
                        "visible": true
                    },
                    {
                        "fieldName": "wfigs_IncidentName",
                        "isEditable": true,
                        "label": "wfigs_IncidentName",
                        "visible": true
                    },
                    {
                        "fieldName": "wfigs_IrwinID",
                        "isEditable": true,
                        "label": "wfigs_IrwinID",
                        "visible": true
                    },
                    {
                        "fieldName": "wfigs_MapMethod",
                        "isEditable": true,
                        "label": "wfigs_MapMethod",
                        "visible": true
                    },
                    {
                        "fieldName": "wfigs_ModifiedOnDateTime_dt",
                        "isEditable": true,
                        "label": "wfigs_ModifiedOnDateTime_dt",
                        "visible": true
                    },
                    {
                        "fieldName": "wfigs_PolygonDateTime",
                        "isEditable": true,
                        "label": "wfigs_PolygonDateTime",
                        "visible": true
                    },
                    {
                        "fieldName": "WindTurb_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "WindTurb_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "WindTurb_ProjName_AttrCount",
                        "isEditable": true,
                        "label": "WindTurb_ProjName_AttrCount",
                        "visible": true
                    }
                ],
                "title": ""
            }
        },
        {
            "layerDefinition": {
                "defaultVisibility": true,
                "minScale": 12000000,
                "maxScale": 0,
                "drawingInfo": {
                    "renderer": {
                        "type": "simple",
                        "symbol": {
                            "type": "esriSFS",
                            "color": [
                                0,
                                0,
                                0,
                                0
                            ],
                            "outline": {
                                "type": "esriSLS",
                                "color": [
                                    255,
                                    71,
                                    71,
                                    255
                                ],
                                "width": 1.125,
                                "style": "esriSLSSolid"
                            },
                            "style": "esriSFSSolid"
                        }
                    }
                }
            },
            "id": 2,
            "popupInfo": {
                "popupElements": [
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "WFIGS Header",
                            "expression": "Expects($feature, [\n    'AkFireNumber',\n    'wfigs_IncidentName',\n    'wfigs_GISAcres',\n    'wfigs_MapMethod',\n    'wfigs_PolygonDateTime',\n    'wfigs_ModifiedOnDateTime_dt',\n    'wfigs_IrwinID',\n    'ReportedAcres',\n    'ReportedAcOverPerimAc'\n]); \n\nvar current_feat_irwin = $feature.wfigs_IrwinID;\n\nvar wfigs_locs_fset = FeatureSetByPortalItem(\n    Portal('https://nifc.maps.arcgis.com'),\n    '405814902c9e411cb4384c49d694e82b',\n    0, \n    // unused fields are commented out, may incorporate more fields as use-cases emerge.\n    [\n        'IrwinID',\n\n        'CpxName',\n\n        'DispatchCenterID',\n\n        'PercentContained',\n        'PercentPerimeterToBeContained',\n\n        //'PredominantFuelGroup',\n        //'PredominantFuelModel',\n        //'PrimaryFuelModel',\n        //'SecondaryFuelModel',\n\n        'FireMgmtComplexity',\n        'IncidentComplexityLevel',\n\n        //'WFDSSDecisionStatus',\n        'EstimatedCostToDate',\n        'TotalIncidentPersonnel',\n\n        //'POOPredictiveServiceAreaID', // use to hyperlink weather info somehow?\n        'POOProtectingAgency',\n        'POOJurisdictionalAgency',\n        'POOJurisdictionalUnit',\n\n        //'FireDiscoveryDateTime',\n\n        'ICS209ReportDateTime',\n        //'ICS209ReportForTimePeriodFrom',\n        //'ICS209ReportForTimePeriodTo',\n        'ICS209ReportStatus',\n        'IncidentManagementOrganization'\n    ],\n    false // do not return geometry\n);\n\nvar query = \"IrwinId = '\" + current_feat_irwin + \"'\";\n\nvar wfigs_loc_feat = First(Filter(wfigs_locs_fset, query));\n\nif (IsEmpty(wfigs_loc_feat)) {\n    return {\n        type : 'text', \n        text : 'System Information Error. Unable to query WFIGS source for additional attributes.'\n    }\n};\n\n//REGION title\n\nvar fire_number = Text($feature.AkFireNumber, '000');\n\nvar title_name = IIF(\n    IsEmpty(wfigs_loc_feat.CpxName),\n    fire_number + '-' + $feature.wfigs_IncidentName,\n    fire_number + '-' + $feature.wfigs_IncidentName + ' (' + wfigs_loc_feat.CpxName +  ' Complex) '\n);\n\nvar info_last_updated = 'Information Last Updated: ' + \n    Text(ChangeTimeZone(Date($feature.wfigs_ModifiedOnDateTime_dt), 'America/Anchorage'), 'MMMM DD, HH:mm') +\n    ' Alaska Time' + '<br>';\n\nvar status = 'Status: ' + $feature.FireActivityStatus;\n//ENDREGION\n\n//REGION acres\nvar reported_acres = 'Reported Acres: ' + $feature.ReportedAcres;\n\nif (IsEmpty($feature.wfigs_GISAcres)) {\n    var acres_info = reported_acres;\n} else {\n    var poly_dt = IIf(\n        IsEmpty($feature.wfigs_PolygonDateTime),\n        'Perimeter mapped on unknown date/time.' + '<br>',\n        'Perimeter Mapped on ' +\n            Text(ChangeTimeZone(Date($feature.wfigs_PolygonDateTime), 'America/Anchorage'), 'MMMM DD, HH:mm') +\n            ' Alaska Time' + '<br>'\n    );\n    var poly_map_method = IIf(\n        IsEmpty($feature.wfigs_MapMethod),\n        'Map Method: Unknown',\n        'Map Method: ' + $feature.wfigs_MapMethod\n    );\n    var perimeter_intel = poly_dt + \n        'Calculated Acres: ' + Text(Round($feature.wfigs_GISAcres,2),'###,###') + '<br>' +\n        poly_map_method;\n    var acres_info = perimeter_intel;\n};\n\nif ($feature.ReportedAcOverPerimAc == 1) {\n    var acres_info = reported_acres + '<br><br>' + perimeter_intel\n}\n\n//ENDREGION\n\n//REGION dispatch center & region\nvar center = IIF(\n    IsEmpty(wfigs_loc_feat.DispatchCenterID),\n    null,\n    'Local Dispatch Center: ' + \n        Replace(wfigs_loc_feat.DispatchCenterID, 'AK', '') + '<br>'\n);\n\nvar region = IIF(\n    IsEmpty($feature.AkFireRegion),\n    null,\n    'AK Fire Region: ' + $feature.AkFireRegion\n);\n\n//REGION personnel, cost, containment\nvar personnel = IIF(\n    IsEmpty(wfigs_loc_feat.TotalIncidentPersonnel),\n    null,\n    'Total Incident Personnel: ' + Text(wfigs_loc_feat.TotalIncidentPersonnel, '###,###') + '<br>'\n);\n\nvar cost = IIF(\n    IsEmpty(wfigs_loc_feat.EstimatedCostToDate),\n    null,\n    'Estimated Cost to Date: ' + Text(wfigs_loc_feat.EstimatedCostToDate, '$###,###') + '<br>'\n);\n\nvar containment = IIF(\n    IsEmpty(wfigs_loc_feat.PercentContained),\n    null,\n    'Percent Contained: ' + wfigs_loc_feat.PercentContained + '%' + '<br>'\n    );\n\nvar to_be_contained = IIF(\n    IsEmpty(wfigs_loc_feat.PercentPerimeterToBeContained),\n    null,\n    'Percent to be Contained: ' + wfigs_loc_feat.PercentPerimeterToBeContained + '%' + '<br>'\n    );\n\nvar region_prs_cst_cnt_empty = IIF(\n    (IsEmpty(personnel) && IsEmpty(cost) && IsEmpty(containment) && IsEmpty(to_be_contained)),\n    'Personnel, Cost, and Containment Information Unavailable at this Time.' + '<br>',\n    null\n);\n//ENDREGION\n\n//REGION POO\nvar poo_protecting_agency = IIF(\n    IsEmpty(wfigs_loc_feat.POOProtectingAgency),\n    null,\n    'POO Protecting Agency: ' + wfigs_loc_feat.POOProtectingAgency + '<br>'\n);\n\nvar poo_jurisdictional_agency = IIF(\n    IsEmpty(wfigs_loc_feat.POOJurisdictionalAgency),\n    null,\n    'POO Jurisdictional Agency: ' + wfigs_loc_feat.POOJurisdictionalAgency + '<br>'\n);\n\nvar poo_jurisdictional_unit = IIF(\n    IsEmpty(wfigs_loc_feat.POOJurisdictionalUnit),\n    null,\n    'POO Jurisdictional Unit: ' + wfigs_loc_feat.POOJurisdictionalUnit + '<br>'\n);\n\nvar region_poo_empty = IIF(\n    (IsEmpty(poo_protecting_agency) && IsEmpty(poo_jurisdictional_agency) && IsEmpty(poo_jurisdictional_unit)),\n    'Point of Origin Land Management Information Unavailable at this Time.' + '<br>',\n    null\n);\n//ENDREGION\n\n//REGION IMT and 209\nvar managegement_org = IIF(\n    IsEmpty(wfigs_loc_feat.IncidentManagementOrganization),\n    null,\n    'Incident Management Organization: ' + wfigs_loc_feat.IncidentManagementOrganization + '<br>'\n);\n\nvar fire_mgmt_complexity = IIF(\n    IsEmpty(wfigs_loc_feat.FireMgmtComplexity),\n    null,\n    'Fire Management Complexity: ' + wfigs_loc_feat.FireMgmtComplexity + '<br>'\n);\n\nvar incident_complexity_level = IIF(\n    IsEmpty(wfigs_loc_feat.IncidentComplexityLevel),\n    null,\n    'Incident Complexity Level: ' + wfigs_loc_feat.IncidentComplexityLevel + '<br>'\n);\n\nvar status_209 = IIF(\n    IsEmpty(wfigs_loc_feat.ICS209ReportStatus),\n    null,\n    'ICS 209 Report Status: ' + wfigs_loc_feat.ICS209ReportStatus + '<br>'\n);\n\nvar last_209 = IIF(\n    IsEmpty(wfigs_loc_feat.ICS209ReportDateTime),\n    null,\n    'ICS 209 Report Date/Time: ' + Text(ChangeTimeZone(Date(wfigs_loc_feat.ICS209ReportDateTime), 'America/Anchorage'), 'MMMM DD, HH:mm') + ' Alaska Time' + '<br>'\n);\n\nvar region_imt_209_empty = IIF(\n    (IsEmpty(managegement_org) && IsEmpty(fire_mgmt_complexity) && IsEmpty(incident_complexity_level) && IsEmpty(status_209) && IsEmpty(last_209)),\n    'Incident Complexity & 209 Information Unavailable at this Time.' + '<br>',\n    null\n);\n//ENDREGION\n\nvar popup_header_html = '<span style=\"font-size: 16px; color: red\">' + //REGION title\n\t'<strong>' + title_name + '</strong>' + '<br>' +\n    '<i>' + info_last_updated +\n    status + '<i/></span>' + \n    '<hr style=\"border: 1px solid black;\">' + \n    '<span style=\"font-size: 14px; color: red\">' + //REGION acres\n    '<i>' + acres_info + '</i>' + '<br>' + \n    '<hr style=\"border: 1px solid black;\">' + \n    '<details><summary><strong>Click To Expand Incident Details</strong></summary>' + //REGION BEGIN DROP-DOWN\n    '<hr style=\"border: 1px solid black;\">' + \n    '<span style=\"font-size: 14px; color: red; line-height: 1.5\">' + //REGION dispatch center & region\n    center +\n    region + '</span>' +\n\t'<hr style=\"border: 1px solid black;\">' +\n    '<span style=\"font-size: 14px; color: red; line-height: 1.5\">' + //REGION personnel, cost, containment\n    containment +\n    to_be_contained + \n    personnel +\n    cost + \n    region_prs_cst_cnt_empty + '</span>' +\n\t'<hr style=\"border: 1px solid black;\">' +\n    '<span style=\"font-size: 14px; color: red; line-height: 1.5\">' + //REGION POO\n    poo_protecting_agency +\n    poo_jurisdictional_agency +\n    poo_jurisdictional_unit +\n    region_poo_empty + '</span>' +\n\t'<hr style=\"border: 1px solid black;\">' +\n    '<span style=\"font-size: 14px; color: red; line-height: 1.5\">' + //REGION management\n    managegement_org +\n    fire_mgmt_complexity +\n    incident_complexity_level +\n    status_209 +\n    last_209 + \n    region_imt_209_empty + '</span>' +\n\t'<hr style=\"border: 1px solid black;\">'\n\nreturn { \n\ttype : 'text', \n\ttext : popup_header_html\n}",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "land management",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction sumDictValues(attrDict) {\n\tvar total_value = 0; \n\tfor (var key in attrDict) { \n\t\ttotal_value += attrDict[key];\n\t}\n\treturn total_value;\n}\n\nfunction writeLandManagementTableArray(sorted_dicts_array, total_value) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###.0') + ' acres -- ' + Round((value/total_value) * 100, 2) + ' %' + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['DefaultLabel', 'MgmtOption_AcreSum', 'Jurisd_Owner_AcreSum', 'Jurisd_Unit_AcreSum']);\nvar output_tables = [];\nvar title_data_dict = Dictionary(\n\t\"Fire Management Options\", $feature.MgmtOption_AcreSum,\n\t\"Jurisdictional Ownership\", $feature.Jurisd_Owner_AcreSum,\n\t\"Jurisdictional Unit\", $feature.Jurisd_Unit_AcreSum\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar total_value = sumDictValues(attrDict);\n\tvar html_rows_array = writeLandManagementTableArray(sorted_dicts_array, total_value);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar geom_class = Split($feature.DefaultLabel, ',', 2)[1];\n\nvar summary_main_head = '<div style=\"text-align: center; margin: 0; padding: 0;\">' + \n    '<span style=\"font-size: 16px; font-weight: bold; display: inline-block;\">' + \n    'Values-at-Risk Summary,' + geom_class +\n    '</span>' + \n    '<hr style=\"border: 2px solid black; width: 80%; margin: 0; padding: 0;\">' +\n    '</div>';\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Land Management Acreage Breakdowns</strong><details><summary><i>click to expand</i></summary><br>';\nreturn { \n\ttype : 'text', \n\ttext : summary_main_head + section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n};\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Communities",
                            "expression": "// START EXECUTION\n//\nExpects($feature,[\n\t'Community_FeatureCount',\n\t'Community_Name_AttrCount',\n]); \n\nif (IsEmpty($feature.Community_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar field_dict = Dictionary($feature.Community_Name_AttrCount);\n\nvar communities = [];\n\nfor (var key in field_dict) {\n    Push(communities, '<tr><td width=\"100%\">' + key + '</td>');\n};\n\nvar feat_or_feats = IIF(\n\t$feature.Community_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Communities: ' +\n\tText(round($feature.Community_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + '<table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +  Concatenate(communities, '</tr>') + \"</table></span>\"\n};\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "USA Structures",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'UsaStruct_FeatureCount',\n\t'UsaStruct_OccCls_AttrCount',\n\t'UsaStruct_PrimOcc_AttrCount',\n\t'UsaStruct_SecOcc_AttrCount',\n]); \n\nif (IsEmpty($feature.UsaStruct_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Structures Occupational Class\", $feature.UsaStruct_OccCls_AttrCount,\n\t\"Structures Primary Occupation\", $feature.UsaStruct_PrimOcc_AttrCount,\n\t\"Structures Secondary Occupation\", $feature.UsaStruct_SecOcc_AttrCount\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.UsaStruct_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>USA Structures: ' +\n\tText(round($feature.UsaStruct_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n};\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "AKSD",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'Aksd_FeatureCount',\n\t'Aksd_MainStruct_AttrSum',\n\t'Aksd_OtherStruct_AttrSum',\n\t'Aksd_Protection_AttrCount',\n\t'Aksd_SiteCat_AttrCount'\n]);\n\nif (IsEmpty($feature.Aksd_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar main_structs = IIF(\n    IsEmpty($feature.Aksd_MainStruct_AttrSum),\n    '---no data---',\n    $feature.Aksd_MainStruct_AttrSum\n);\n\nvar other_structs = IIF(\n    IsEmpty($feature.Aksd_OtherStruct_AttrSum),\n    '---no data---',\n    $feature.Aksd_OtherStruct_AttrSum\n);\n\nvar counted_structs_attrDict = IIF(\n    main_structs == '---no data---' && other_structs == '---no data---',\n    Dictionary('---no data---', '---no data---'),\n    Dictionary(\n    'Main Structures', $feature.Aksd_MainStruct_AttrSum,\n    'Other Structures', $feature.Aksd_OtherStruct_AttrSum\n    )\n);\n\nvar title_data_dict = Dictionary(\n\t\"Counted Structures\", counted_structs_attrDict,\n\t\"Site Category Breakdown\", makeAttrDict($feature.Aksd_SiteCat_AttrCount),\n\t\"Site Protection Level Breakdown\", makeAttrDict($feature.Aksd_Protection_AttrCount)\n);\n\nfor (var title in title_data_dict) {\n\tvar attrDict = title_data_dict[title];\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array)\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.Aksd_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Alaska Known Sites Database: ' +\n\tText(round($feature.Aksd_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "NPS Structures",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'NpsStruct_FeatureCount',\n\t'NpsStruct_Use_AttrCount',\n\t'NpsStruct_Protection_AttrCount',\n\t'NpsStruct_Rating_AttrCount',\n]); \n\nif (IsEmpty($feature.NpsStruct_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Structure Use\", $feature.NpsStruct_Use_AttrCount,\n\t\"Structure Protection Level\", $feature.NpsStruct_Protection_AttrCount,\n\t\"Structure Wildfire Risk Rating\", $feature.NpsStruct_Rating_AttrCount\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.NpsStruct_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>NPS Structures: ' +\n\tText(round($feature.NpsStruct_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n};\n//\n// END EXECUTION\n",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Parcels",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeParcelAcresTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (value == '---no data---'){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + value + '</td>');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!IsEmpty(value)){\n\t\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###.0') + ' acres</td>');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\nfunction writeParcelValuesTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (value == \"---no data---\"){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + value + ' </td>');\n\t\t\t} \n\t\t\telse {\n\t\t\t\t// NOTE THE USE OF *1 HERE. value IS ALREADY TYPE TEXT.\n\t\t\t\tif (!IsEmpty(value)){\n\t\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value*1, '$###,###') + ' USD</td>');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['Parcel_BuildingValue_AttrSum','Parcel_LandValue_AttrSum','Parcel_TotalValue_AttrSum','Parcel_PropType_AcreSum','Parcel_PropUse_AcreSum','Parcel_FeatureCount']);\n\nif (IsEmpty($feature.Parcel_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar output_tables = [];\n\nvar build_val = IIF(\n    IsEmpty($feature.Parcel_BuildingValue_AttrSum) || $feature.Parcel_BuildingValue_AttrSum == 0,\n    '---no data---',\n    $feature.Parcel_BuildingValue_AttrSum\n);\n\nvar land_val = IIF(\n    IsEmpty($feature.Parcel_LandValue_AttrSum) || $feature.Parcel_LandValue_AttrSum == 0,\n    '---no data---',\n    $feature.Parcel_LandValue_AttrSum\n);\n\nvar tot_val = IIF(\n    IsEmpty($feature.Parcel_TotalValue_AttrSum) || $feature.Parcel_TotalValue_AttrSum == 0,\n    '---no data---',\n    $feature.Parcel_TotalValue_AttrSum\n);\n\nvar pval_attrDict = IIF(\n    build_val == '---no data---' && land_val == '---no data---' && tot_val == '---no data---',\n    Dictionary(\n        '---no data---', '---no data---',\n    ),\n    Dictionary(\n\t\"Parcel Building Value\", build_val,\n\t\"Parcel Land Value\", land_val,\n\t\"Parcel Total Value\", tot_val\n    )\n);\n\nvar sorted_pvalDict_array = sortDict(pval_attrDict);\nvar pval_html_rows_array = writeParcelValuesTableArray(sorted_pvalDict_array);\nvar pval_html_table = formatTable(pval_html_rows_array, \"Parcel Values\");\nPush(output_tables, pval_html_table);\n\nvar title_data_dict = Dictionary(\n\t\"Parcel Type Acreage Breakdown\", $feature.Parcel_PropType_AcreSum,\n\t\"Parcel Use Acreage Breakdown\", $feature.Parcel_PropUse_AcreSum\n);\n\nfor (var title in title_data_dict) {\n\tvar field = DefaultValue(title_data_dict, [title], \"\");\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeParcelAcresTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.Parcel_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Land Parcels: ' +\n\tText(round($feature.Parcel_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n};\n//\n// END EXECUTION\n\n",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Allotments",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeAllotmentAcresTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###.0') + ' acres</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['NtvAllot_Status_AcreSum','NtvAllot_FeatureCount']);\n\nif (IsEmpty($feature.NtvAllot_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar output_tables = [];\n\nvar title_data_dict = Dictionary(\n\t\"Allotment Status Acreage Breakdown\", $feature.NtvAllot_Status_AcreSum,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = DefaultValue(title_data_dict, [title], \"\");\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeAllotmentAcresTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.NtvAllot_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Native Allotments: ' +\n\tText(round($feature.NtvAllot_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n};\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Powerlines",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeLineFeetTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n      if (value == '---no data---'){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n      }\n\t\t\tif (value > 5280) {\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(Round(value / 5280, 2), '###,###.00') + ' miles</td>');\n\t\t\t}\n      if (value < 5280) {\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + ' feet</td>');\n      }\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['AkPowerLine_CondType_FeetSum','AkPowerLine_Voltage_FeetSum','AkPowerLine_TotalFeet']);\n\nif (IsEmpty($feature.AkPowerLine_TotalFeet)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar output_tables = [];\n\nvar title_data_dict = Dictionary(\n\t\"Powerline Types\", $feature.AkPowerLine_CondType_FeetSum,\n\t\"Powerline Voltages\", $feature.AkPowerLine_Voltage_FeetSum\n);\n\nfor (var title in title_data_dict) {\n\tvar field = DefaultValue(title_data_dict, [title], \"\");\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeLineFeetTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n}\n\nvar total_length = IIF(\n\t$feature.AkPowerLine_TotalFeet > 5280,\n\tText(Round($feature.AkPowerLine_TotalFeet / 5280, 2), '###,###.00') + ' Miles',\n\tText(Round($feature.AkPowerLine_TotalFeet, 0),'###,###') + ' Feet'\n)\n\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Powerlines: ' +\n\ttotal_length + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + \"</span>\"\n}\n//\n// END EXECUTION\n\n",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Powerplants",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n    'PowerPlant_FeatureCount',\n    'PowerPlant_PrimSource_AttrCount',\n    'PowerPlant_SectorName_AttrCount',\n    'PowerPlant_UtilName_AttrCount'\n]); \n\nif (IsEmpty($feature.PowerPlant_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Primary Power Source\", $feature.PowerPlant_PrimSource_AttrCount,\n\t\"Sector Name\", $feature.PowerPlant_SectorName_AttrCount,\n\t\"Utility Name\", $feature.PowerPlant_UtilName_AttrCount,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.PowerPlant_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Powerplants: ' +\n\tText(round($feature.PowerPlant_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Communications Sites",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'ComsTwr_FeatureCount',\n\t'ComsTwr_Type_AttrCount',\n]); \n\nif (IsEmpty($feature.ComsTwr_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Site Type\", $feature.ComsTwr_Type_AttrCount,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.ComsTwr_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Communications Sites: ' +\n\tText(round($feature.ComsTwr_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Weather Stations",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'WeatherStation_FeatureCount',\n\t'WeatherStation_Name_AttrCount',\n]); \n\nif (IsEmpty($feature.WeatherStation_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Station Type\", $feature.WeatherStation_Name_AttrCount,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.WeatherStation_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Weather Stations: ' +\n\tText(round($feature.WeatherStation_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Pipelines",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeLineFeetTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n      if (value == '---no data---'){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n      }\n\t\t\tif (value > 5280) {\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(Round(value / 5280, 2), '###,###.00') + ' miles</td>');\n\t\t\t}\n      if (value < 5280) {\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + ' feet</td>');\n      }\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['PipeLine_TotalFeet','PipeLine_Name_FeetSum']);\n\nif (IsEmpty($feature.Pipeline_TotalFeet)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar output_tables = [];\n\nvar title_data_dict = Dictionary(\n\t\"Pipelines by Name\", $feature.PipeLine_Name_FeetSum\n);\n\nfor (var title in title_data_dict) {\n\tvar field = DefaultValue(title_data_dict, [title], \"\");\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeLineFeetTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n}\n\nvar total_length = IIF(\n\t$feature.PipeLine_TotalFeet > 5280,\n\tText(Round($feature.PipeLine_TotalFeet / 5280, 2), '###,###.00') + ' Miles',\n\tText(Round($feature.PipeLine_TotalFeet, 0),'###,###') + ' Feet'\n)\n\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Pipelines: ' +\n\ttotal_length + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION\n\n",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Petrol Terminal",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n    'PetrolTerm_FeatureCount',\n    'PetrolTerm_Company_AttrCount'\n]); \n\nif (IsEmpty($feature.PetrolTerm_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Company Name\", $feature.PetrolTerm_Company_AttrCount,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.PetrolTerm_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Petrol Terminals: ' +\n\tText(round($feature.PetrolTerm_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Mines",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n    'AkMine_Note_AttrCount',\n    'AkMine_Type_AttrCount',\n    'AkMine_FeatureCount',\n\t\t'AkMine_Active_AttrCount'\n]); \n\nif (IsEmpty($feature.AkMine_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar active_attr_dict_raw = makeAttrDict($feature.AkMine_Active_AttrCount);\n\nvar rename_active_bool = Dictionary(\n\t'0', 'No',\n\t'1', 'Yes'\n);\n\nvar active_attr_dict = Dictionary()\nfor (var key in active_attr_dict_raw) {\n\tvar new_key = rename_active_bool[key]\n\tactive_attr_dict[new_key] = active_attr_dict_raw[key]\n};\n\nvar title_data_dict = Dictionary(\n\t\"Active Status\", active_attr_dict,\n\t\"Mine Ownership\", makeAttrDict($feature.AkMine_Note_AttrCount),\n  \"Mine Type\", makeAttrDict($feature.AkMine_Type_AttrCount)\n);\n\nfor (var title in title_data_dict) {\n\tvar attrDict = title_data_dict[title];\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.AkMine_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Mines: ' +\n\tText(round($feature.AkMine_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Silviculture",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeSilvicultureAcresTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (value == '---no data---'){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + value + '</td>');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!IsEmpty(value)){\n\t\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###.0') + ' acres</td>');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\nfunction writeSilvicultureValuesTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (value == \"---no data---\"){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + value + ' </td>');\n\t\t\t} \n\t\t\telse {\n\t\t\t\tif (!IsEmpty(value)){\n\t\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '$###,###') + ' USD</td>');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['Silviculture_FeatureCount','Silviculture_Status_AcreSum','Silviculture_TotalValue_AttrSum','Silviculture_TotalAcres']);\n\nif (IsEmpty($feature.Silviculture_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar output_tables = [];\n\nvar silvi_val = IIF(\n    IsEmpty($feature.Silviculture_TotalValue_AttrSum),\n    '---no data---',\n    $feature.Silviculture_TotalValue_AttrSum\n);\n\nvar silvi_val_attrDict = Dictionary(\"Silviculture Estimated Value\", silvi_val);\n\nvar silvi_acres = IIF(\n    IsEmpty($feature.Silviculture_TotalAcres),\n    '---no data---',\n    $feature.Silviculture_TotalAcres\n);\n\nvar silvi_acres_attrDict = Dictionary(\"Silviculture Total Acres\", silvi_acres);\n\nvar sivli_val_html_rows_array = writeSilvicultureValuesTableArray([silvi_val_attrDict]);\n\nvar silvi_acres_html_rows_array = writeSilvicultureAcresTableArray([silvi_acres_attrDict]);\n\nvar silvi_totals_html_rows_array = Splice(\n    silvi_acres_html_rows_array,\n    sivli_val_html_rows_array\n)\n\nvar silvi_totals_table = formatTable(silvi_totals_html_rows_array, \"Silviculture Acreage & Estimated Value\");\nPush(output_tables, silvi_totals_table);\n\nvar title_data_dict = Dictionary(\n\t\"Silviculture Status Acreage Breakdown\", $feature.Silviculture_Status_AcreSum,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = DefaultValue(title_data_dict, [title], \"\");\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeSilvicultureAcresTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.Silviculture_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Silviculture: ' +\n\tText(round($feature.Silviculture_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + \"</span>\"\n}\n//\n// END EXECUTION\n\n",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Railroad",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeLineFeetTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n      if (value == '---no data---'){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n      }\n\t\t\tif (value > 5280) {\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(Round(value / 5280, 2), '###,###.00') + ' miles</td>');\n\t\t\t}\n      if (value < 5280) {\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + ' feet</td>');\n      }\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['Railroad_NetDesc_FeetSum','Railroad_TotalFeet']);\n\nif (IsEmpty($feature.Railroad_TotalFeet)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar output_tables = [];\n\nvar title_data_dict = Dictionary(\n\t\"Railway Type\", $feature.Railroad_NetDesc_FeetSum\n);\n\nfor (var title in title_data_dict) {\n\tvar field = DefaultValue(title_data_dict, [title], \"\");\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeLineFeetTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n}\n\nvar total_length = IIF(\n\t$feature.Railroad_TotalFeet > 5280,\n\tText(Round($feature.Railroad_TotalFeet / 5280, 2), '###,###.00') + ' Miles',\n\tText(Round($feature.Railroad_TotalFeet, 0),'###,###') + ' Feet'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Railroad: ' +\n\ttotal_length + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION\n\n",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Wind Turbines",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'WindTurb_FeatureCount',\n\t'WindTurb_ProjName_AttrCount',\n]); \n\nif (IsEmpty($feature.WindTurb_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Count by Project\", $feature.WindTurb_ProjName_AttrCount\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.WindTurb_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Wind Turbines: ' +\n\tText(round($feature.WindTurb_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Special Mgmt",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeSpecMgmtTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,['SpecMgmt_FeatureCount', 'SpecMgmt_Consid_AttrCount']); \n\nif (IsEmpty($feature.SpecMgmt_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Consideration Notes\", $feature.SpecMgmt_Consid_AttrCount,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeSpecMgmtTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.SpecMgmt_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Special Management Considerations: ' +\n\tText($feature.SpecMgmt_FeatureCount, '###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Aviation Facilities / Runways",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'Runway_FeatureCount',\n\t'Runway_LocID_AttrCount',\n\t'Runway_Ownership_AttrCount'\n]); \n\nif (IsEmpty($feature.Runway_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar loc_id_dict = Dictionary($feature.Runway_LocID_AttrCount);\nvar unique_loc_ids = 0;\nfor (var idx in loc_id_dict) {\n\t++unique_loc_ids\n};\n\nvar title_data_dict = Dictionary(\n\t\"Runway Ownership\", $feature.Runway_Ownership_AttrCount\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar runway_or_runways = IIF(\n\t$feature.Runway_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar facility_or_facilities = IIF(\n\tunique_loc_ids == 1,\n\t' (1 Individual Landing Facility)',\n\t' (Individual Landing Facilities: ' + unique_loc_ids + ')'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Runways: ' + Text(round($feature.Runway_FeatureCount, 0),'###,###') + runway_or_runways + facility_or_facilities +\n\t'</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    }
                ],
                "fieldInfos": [
                    {
                        "fieldName": "OBJECTID",
                        "isEditable": false,
                        "label": "OBJECTID",
                        "visible": false
                    },
                    {
                        "fieldName": "AkFireNumber",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "AkFireNumber",
                        "visible": true
                    },
                    {
                        "fieldName": "AkFireRegion",
                        "isEditable": true,
                        "label": "AkFireRegion",
                        "visible": true
                    },
                    {
                        "fieldName": "AkMine_Active_AttrCount",
                        "isEditable": true,
                        "label": "AkMine_Active_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "AkMine_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "AkMine_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "AkMine_Note_AttrCount",
                        "isEditable": true,
                        "label": "AkMine_Note_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "AkMine_Type_AttrCount",
                        "isEditable": true,
                        "label": "AkMine_Type_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "AkPowerLine_CondType_FeetSum",
                        "isEditable": true,
                        "label": "AkPowerLine_CondType_FeetSum",
                        "visible": true
                    },
                    {
                        "fieldName": "AkPowerLine_TotalFeet",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "AkPowerLine_TotalFeet",
                        "visible": true
                    },
                    {
                        "fieldName": "AkPowerLine_Voltage_FeetSum",
                        "isEditable": true,
                        "label": "AkPowerLine_Voltage_FeetSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Aksd_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Aksd_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Aksd_MainStruct_AttrSum",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Aksd_MainStruct_AttrSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Aksd_OtherStruct_AttrSum",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Aksd_OtherStruct_AttrSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Aksd_Protection_AttrCount",
                        "isEditable": true,
                        "label": "Aksd_Protection_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Aksd_SiteCat_AttrCount",
                        "isEditable": true,
                        "label": "Aksd_SiteCat_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "AnalysisBufferMiles",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "AnalysisBufferMiles",
                        "visible": true
                    },
                    {
                        "fieldName": "Community_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Community_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Community_Name_AttrCount",
                        "isEditable": true,
                        "label": "Community_Name_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "ComsTwr_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "ComsTwr_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "ComsTwr_Type_AttrCount",
                        "isEditable": true,
                        "label": "ComsTwr_Type_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "DefaultLabel",
                        "isEditable": true,
                        "label": "DefaultLabel",
                        "visible": true
                    },
                    {
                        "fieldName": "FireActivityStatus",
                        "isEditable": true,
                        "label": "FireActivityStatus",
                        "visible": true
                    },
                    {
                        "fieldName": "GlobalID",
                        "isEditable": false,
                        "label": "GlobalID",
                        "visible": false
                    },
                    {
                        "fieldName": "HasError",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "HasError",
                        "visible": true
                    },
                    {
                        "fieldName": "Jurisd_Owner_AcreSum",
                        "isEditable": true,
                        "label": "Jurisd_Owner_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Jurisd_Unit_AcreSum",
                        "isEditable": true,
                        "label": "Jurisd_Unit_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "MgmtOption_AcreSum",
                        "isEditable": true,
                        "label": "MgmtOption_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "NpsStruct_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "NpsStruct_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "NpsStruct_Protection_AttrCount",
                        "isEditable": true,
                        "label": "NpsStruct_Protection_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "NpsStruct_Rating_AttrCount",
                        "isEditable": true,
                        "label": "NpsStruct_Rating_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "NpsStruct_Use_AttrCount",
                        "isEditable": true,
                        "label": "NpsStruct_Use_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "NtvAllot_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "NtvAllot_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "NtvAllot_Status_AcreSum",
                        "isEditable": true,
                        "label": "NtvAllot_Status_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "NtvAllot_TotalAcres",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "NtvAllot_TotalAcres",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_BuildingValue_AttrSum",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Parcel_BuildingValue_AttrSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Parcel_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_LandValue_AttrSum",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Parcel_LandValue_AttrSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_PropType_AcreSum",
                        "isEditable": true,
                        "label": "Parcel_PropType_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_PropUse_AcreSum",
                        "isEditable": true,
                        "label": "Parcel_PropUse_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_TotalAcres",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Parcel_TotalAcres",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_TotalValue_AttrSum",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Parcel_TotalValue_AttrSum",
                        "visible": true
                    },
                    {
                        "fieldName": "PetrolTerm_Company_AttrCount",
                        "isEditable": true,
                        "label": "PetrolTerm_Company_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "PetrolTerm_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "PetrolTerm_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "PipeLine_Name_FeetSum",
                        "isEditable": true,
                        "label": "PipeLine_Name_FeetSum",
                        "visible": true
                    },
                    {
                        "fieldName": "PipeLine_TotalFeet",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "PipeLine_TotalFeet",
                        "visible": true
                    },
                    {
                        "fieldName": "PowerPlant_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "PowerPlant_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "PowerPlant_PrimSource_AttrCount",
                        "isEditable": true,
                        "label": "PowerPlant_PrimSource_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "PowerPlant_SectorName_AttrCount",
                        "isEditable": true,
                        "label": "PowerPlant_SectorName_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "PowerPlant_UtilName_AttrCount",
                        "isEditable": true,
                        "label": "PowerPlant_UtilName_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Railroad_NetDesc_FeetSum",
                        "isEditable": true,
                        "label": "Railroad_NetDesc_FeetSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Railroad_TotalFeet",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Railroad_TotalFeet",
                        "visible": true
                    },
                    {
                        "fieldName": "ReportedAcOverPerimAc",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "ReportedAcOverPerimAc",
                        "visible": true
                    },
                    {
                        "fieldName": "ReportedAcres",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "ReportedAcres",
                        "visible": true
                    },
                    {
                        "fieldName": "Runway_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Runway_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Runway_LocID_AttrCount",
                        "isEditable": true,
                        "label": "Runway_LocID_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Runway_Ownership_AttrCount",
                        "isEditable": true,
                        "label": "Runway_Ownership_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Shape__Area",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": false,
                        "label": "Shape__Area",
                        "visible": true
                    },
                    {
                        "fieldName": "Shape__Length",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": false,
                        "label": "Shape__Length",
                        "visible": true
                    },
                    {
                        "fieldName": "Silviculture_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Silviculture_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Silviculture_Status_AcreSum",
                        "isEditable": true,
                        "label": "Silviculture_Status_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Silviculture_TotalAcres",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Silviculture_TotalAcres",
                        "visible": true
                    },
                    {
                        "fieldName": "Silviculture_TotalValue_AttrSum",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Silviculture_TotalValue_AttrSum",
                        "visible": true
                    },
                    {
                        "fieldName": "SpecMgmt_Consid_AttrCount",
                        "isEditable": true,
                        "label": "SpecMgmt_Consid_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "SpecMgmt_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "SpecMgmt_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "UsaStruct_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "UsaStruct_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "UsaStruct_OccCls_AttrCount",
                        "isEditable": true,
                        "label": "UsaStruct_OccCls_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "UsaStruct_PrimOcc_AttrCount",
                        "isEditable": true,
                        "label": "UsaStruct_PrimOcc_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "UsaStruct_SecOcc_AttrCount",
                        "isEditable": true,
                        "label": "UsaStruct_SecOcc_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "WeatherStation_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "WeatherStation_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "WeatherStation_Name_AttrCount",
                        "isEditable": true,
                        "label": "WeatherStation_Name_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "wfigs_GISAcres",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "wfigs_GISAcres",
                        "visible": true
                    },
                    {
                        "fieldName": "wfigs_IncidentName",
                        "isEditable": true,
                        "label": "wfigs_IncidentName",
                        "visible": true
                    },
                    {
                        "fieldName": "wfigs_IrwinID",
                        "isEditable": true,
                        "label": "wfigs_IrwinID",
                        "visible": true
                    },
                    {
                        "fieldName": "wfigs_MapMethod",
                        "isEditable": true,
                        "label": "wfigs_MapMethod",
                        "visible": true
                    },
                    {
                        "fieldName": "wfigs_ModifiedOnDateTime_dt",
                        "isEditable": true,
                        "label": "wfigs_ModifiedOnDateTime_dt",
                        "visible": true
                    },
                    {
                        "fieldName": "wfigs_PolygonDateTime",
                        "isEditable": true,
                        "label": "wfigs_PolygonDateTime",
                        "visible": true
                    },
                    {
                        "fieldName": "WindTurb_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "WindTurb_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "WindTurb_ProjName_AttrCount",
                        "isEditable": true,
                        "label": "WindTurb_ProjName_AttrCount",
                        "visible": false
                    }
                ],
                "title": ""
            }
        },
        {
            "layerDefinition": {
                "defaultVisibility": true,
                "minScale": 12000000,
                "maxScale": 0,
                "drawingInfo": {
                    "renderer": {
                        "type": "simple",
                        "symbol": {
                            "type": "esriSFS",
                            "color": [
                                0,
                                0,
                                0,
                                0
                            ],
                            "outline": {
                                "type": "esriSLS",
                                "color": [
                                    255,
                                    71,
                                    71,
                                    255
                                ],
                                "width": 0.75,
                                "style": "esriSLSSolid"
                            },
                            "style": "esriSFSSolid"
                        }
                    }
                }
            },
            "id": 3,
            "attributeTableInfo": {
                "attributeTableElements": [
                    {
                        "label": "AkFireNumber",
                        "type": "field",
                        "fieldName": "AkFireNumber"
                    },
                    {
                        "label": "AkFireRegion",
                        "type": "field",
                        "fieldName": "AkFireRegion"
                    },
                    {
                        "label": "AkMine_Active_AttrCount",
                        "type": "field",
                        "fieldName": "AkMine_Active_AttrCount"
                    },
                    {
                        "label": "AkMine_FeatureCount",
                        "type": "field",
                        "fieldName": "AkMine_FeatureCount"
                    },
                    {
                        "label": "AkMine_Note_AttrCount",
                        "type": "field",
                        "fieldName": "AkMine_Note_AttrCount"
                    },
                    {
                        "label": "AkMine_Type_AttrCount",
                        "type": "field",
                        "fieldName": "AkMine_Type_AttrCount"
                    },
                    {
                        "label": "AkPowerLine_CondType_FeetSum",
                        "type": "field",
                        "fieldName": "AkPowerLine_CondType_FeetSum"
                    },
                    {
                        "label": "AkPowerLine_TotalFeet",
                        "type": "field",
                        "fieldName": "AkPowerLine_TotalFeet"
                    },
                    {
                        "label": "AkPowerLine_Voltage_FeetSum",
                        "type": "field",
                        "fieldName": "AkPowerLine_Voltage_FeetSum"
                    },
                    {
                        "label": "Aksd_FeatureCount",
                        "type": "field",
                        "fieldName": "Aksd_FeatureCount"
                    },
                    {
                        "label": "Aksd_MainStruct_AttrSum",
                        "type": "field",
                        "fieldName": "Aksd_MainStruct_AttrSum"
                    },
                    {
                        "label": "Aksd_OtherStruct_AttrSum",
                        "type": "field",
                        "fieldName": "Aksd_OtherStruct_AttrSum"
                    },
                    {
                        "label": "Aksd_Protection_AttrCount",
                        "type": "field",
                        "fieldName": "Aksd_Protection_AttrCount"
                    },
                    {
                        "label": "Aksd_SiteCat_AttrCount",
                        "type": "field",
                        "fieldName": "Aksd_SiteCat_AttrCount"
                    },
                    {
                        "label": "AnalysisBufferMiles",
                        "type": "field",
                        "fieldName": "AnalysisBufferMiles"
                    },
                    {
                        "label": "Community_FeatureCount",
                        "type": "field",
                        "fieldName": "Community_FeatureCount"
                    },
                    {
                        "label": "Community_Name_AttrCount",
                        "type": "field",
                        "fieldName": "Community_Name_AttrCount"
                    },
                    {
                        "label": "ComsTwr_FeatureCount",
                        "type": "field",
                        "fieldName": "ComsTwr_FeatureCount"
                    },
                    {
                        "label": "ComsTwr_Type_AttrCount",
                        "type": "field",
                        "fieldName": "ComsTwr_Type_AttrCount"
                    },
                    {
                        "label": "DefaultLabel",
                        "type": "field",
                        "fieldName": "DefaultLabel"
                    },
                    {
                        "label": "FireActivityStatus",
                        "type": "field",
                        "fieldName": "FireActivityStatus"
                    },
                    {
                        "label": "HasError",
                        "type": "field",
                        "fieldName": "HasError"
                    },
                    {
                        "label": "Jurisd_Owner_AcreSum",
                        "type": "field",
                        "fieldName": "Jurisd_Owner_AcreSum"
                    },
                    {
                        "label": "Jurisd_Unit_AcreSum",
                        "type": "field",
                        "fieldName": "Jurisd_Unit_AcreSum"
                    },
                    {
                        "label": "MgmtOption_AcreSum",
                        "type": "field",
                        "fieldName": "MgmtOption_AcreSum"
                    },
                    {
                        "label": "NpsStruct_FeatureCount",
                        "type": "field",
                        "fieldName": "NpsStruct_FeatureCount"
                    },
                    {
                        "label": "NpsStruct_Protection_AttrCount",
                        "type": "field",
                        "fieldName": "NpsStruct_Protection_AttrCount"
                    },
                    {
                        "label": "NpsStruct_Rating_AttrCount",
                        "type": "field",
                        "fieldName": "NpsStruct_Rating_AttrCount"
                    },
                    {
                        "label": "NpsStruct_Use_AttrCount",
                        "type": "field",
                        "fieldName": "NpsStruct_Use_AttrCount"
                    },
                    {
                        "label": "NtvAllot_FeatureCount",
                        "type": "field",
                        "fieldName": "NtvAllot_FeatureCount"
                    },
                    {
                        "label": "NtvAllot_Status_AcreSum",
                        "type": "field",
                        "fieldName": "NtvAllot_Status_AcreSum"
                    },
                    {
                        "label": "NtvAllot_TotalAcres",
                        "type": "field",
                        "fieldName": "NtvAllot_TotalAcres"
                    },
                    {
                        "label": "Parcel_BuildingValue_AttrSum",
                        "type": "field",
                        "fieldName": "Parcel_BuildingValue_AttrSum"
                    },
                    {
                        "label": "Parcel_FeatureCount",
                        "type": "field",
                        "fieldName": "Parcel_FeatureCount"
                    },
                    {
                        "label": "Parcel_LandValue_AttrSum",
                        "type": "field",
                        "fieldName": "Parcel_LandValue_AttrSum"
                    },
                    {
                        "label": "Parcel_PropType_AcreSum",
                        "type": "field",
                        "fieldName": "Parcel_PropType_AcreSum"
                    },
                    {
                        "label": "Parcel_PropUse_AcreSum",
                        "type": "field",
                        "fieldName": "Parcel_PropUse_AcreSum"
                    },
                    {
                        "label": "Parcel_TotalAcres",
                        "type": "field",
                        "fieldName": "Parcel_TotalAcres"
                    },
                    {
                        "label": "Parcel_TotalValue_AttrSum",
                        "type": "field",
                        "fieldName": "Parcel_TotalValue_AttrSum"
                    },
                    {
                        "label": "PetrolTerm_Company_AttrCount",
                        "type": "field",
                        "fieldName": "PetrolTerm_Company_AttrCount"
                    },
                    {
                        "label": "PetrolTerm_FeatureCount",
                        "type": "field",
                        "fieldName": "PetrolTerm_FeatureCount"
                    },
                    {
                        "label": "PipeLine_Name_FeetSum",
                        "type": "field",
                        "fieldName": "PipeLine_Name_FeetSum"
                    },
                    {
                        "label": "PipeLine_TotalFeet",
                        "type": "field",
                        "fieldName": "PipeLine_TotalFeet"
                    },
                    {
                        "label": "PowerPlant_FeatureCount",
                        "type": "field",
                        "fieldName": "PowerPlant_FeatureCount"
                    },
                    {
                        "label": "PowerPlant_PrimSource_AttrCount",
                        "type": "field",
                        "fieldName": "PowerPlant_PrimSource_AttrCount"
                    },
                    {
                        "label": "PowerPlant_SectorName_AttrCount",
                        "type": "field",
                        "fieldName": "PowerPlant_SectorName_AttrCount"
                    },
                    {
                        "label": "PowerPlant_UtilName_AttrCount",
                        "type": "field",
                        "fieldName": "PowerPlant_UtilName_AttrCount"
                    },
                    {
                        "label": "Railroad_NetDesc_FeetSum",
                        "type": "field",
                        "fieldName": "Railroad_NetDesc_FeetSum"
                    },
                    {
                        "label": "Railroad_TotalFeet",
                        "type": "field",
                        "fieldName": "Railroad_TotalFeet"
                    },
                    {
                        "label": "ReportedAcOverPerimAc",
                        "type": "field",
                        "fieldName": "ReportedAcOverPerimAc"
                    },
                    {
                        "label": "ReportedAcres",
                        "type": "field",
                        "fieldName": "ReportedAcres"
                    },
                    {
                        "label": "Runway_FeatureCount",
                        "type": "field",
                        "fieldName": "Runway_FeatureCount"
                    },
                    {
                        "label": "Runway_LocID_AttrCount",
                        "type": "field",
                        "fieldName": "Runway_LocID_AttrCount"
                    },
                    {
                        "label": "Runway_Ownership_AttrCount",
                        "type": "field",
                        "fieldName": "Runway_Ownership_AttrCount"
                    },
                    {
                        "label": "Shape__Area",
                        "type": "field",
                        "fieldName": "Shape__Area"
                    },
                    {
                        "label": "Shape__Length",
                        "type": "field",
                        "fieldName": "Shape__Length"
                    },
                    {
                        "label": "Silviculture_FeatureCount",
                        "type": "field",
                        "fieldName": "Silviculture_FeatureCount"
                    },
                    {
                        "label": "Silviculture_Status_AcreSum",
                        "type": "field",
                        "fieldName": "Silviculture_Status_AcreSum"
                    },
                    {
                        "label": "Silviculture_TotalAcres",
                        "type": "field",
                        "fieldName": "Silviculture_TotalAcres"
                    },
                    {
                        "label": "Silviculture_TotalValue_AttrSum",
                        "type": "field",
                        "fieldName": "Silviculture_TotalValue_AttrSum"
                    },
                    {
                        "label": "SpecMgmt_Consid_AttrCount",
                        "type": "field",
                        "fieldName": "SpecMgmt_Consid_AttrCount"
                    },
                    {
                        "label": "SpecMgmt_FeatureCount",
                        "type": "field",
                        "fieldName": "SpecMgmt_FeatureCount"
                    },
                    {
                        "label": "UsaStruct_FeatureCount",
                        "type": "field",
                        "fieldName": "UsaStruct_FeatureCount"
                    },
                    {
                        "label": "UsaStruct_OccCls_AttrCount",
                        "type": "field",
                        "fieldName": "UsaStruct_OccCls_AttrCount"
                    },
                    {
                        "label": "UsaStruct_PrimOcc_AttrCount",
                        "type": "field",
                        "fieldName": "UsaStruct_PrimOcc_AttrCount"
                    },
                    {
                        "label": "UsaStruct_SecOcc_AttrCount",
                        "type": "field",
                        "fieldName": "UsaStruct_SecOcc_AttrCount"
                    },
                    {
                        "label": "WeatherStation_FeatureCount",
                        "type": "field",
                        "fieldName": "WeatherStation_FeatureCount"
                    },
                    {
                        "label": "WeatherStation_Name_AttrCount",
                        "type": "field",
                        "fieldName": "WeatherStation_Name_AttrCount"
                    },
                    {
                        "label": "wfigs_GISAcres",
                        "type": "field",
                        "fieldName": "wfigs_GISAcres"
                    },
                    {
                        "label": "wfigs_IncidentName",
                        "type": "field",
                        "fieldName": "wfigs_IncidentName"
                    },
                    {
                        "label": "wfigs_IrwinID",
                        "type": "field",
                        "fieldName": "wfigs_IrwinID"
                    },
                    {
                        "label": "wfigs_MapMethod",
                        "type": "field",
                        "fieldName": "wfigs_MapMethod"
                    },
                    {
                        "label": "wfigs_ModifiedOnDateTime_dt",
                        "type": "field",
                        "fieldName": "wfigs_ModifiedOnDateTime_dt"
                    },
                    {
                        "label": "wfigs_PolygonDateTime",
                        "type": "field",
                        "fieldName": "wfigs_PolygonDateTime"
                    },
                    {
                        "label": "WindTurb_FeatureCount",
                        "type": "field",
                        "fieldName": "WindTurb_FeatureCount"
                    },
                    {
                        "label": "WindTurb_ProjName_AttrCount",
                        "type": "field",
                        "fieldName": "WindTurb_ProjName_AttrCount"
                    }
                ],
                "orderByFields": []
            },
            "popupInfo": {
                "popupElements": [
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "WFIGS Header",
                            "expression": "Expects($feature, [\n    'AkFireNumber',\n    'wfigs_IncidentName',\n    'wfigs_GISAcres',\n    'wfigs_MapMethod',\n    'wfigs_PolygonDateTime',\n    'wfigs_ModifiedOnDateTime_dt',\n    'wfigs_IrwinID',\n    'ReportedAcres',\n    'ReportedAcOverPerimAc'\n]); \n\nvar current_feat_irwin = $feature.wfigs_IrwinID;\n\nvar wfigs_locs_fset = FeatureSetByPortalItem(\n    Portal('https://nifc.maps.arcgis.com'),\n    '405814902c9e411cb4384c49d694e82b',\n    0, \n    // unused fields are commented out, may incorporate more fields as use-cases emerge.\n    [\n        'IrwinID',\n\n        'CpxName',\n\n        'DispatchCenterID',\n\n        'PercentContained',\n        'PercentPerimeterToBeContained',\n\n        //'PredominantFuelGroup',\n        //'PredominantFuelModel',\n        //'PrimaryFuelModel',\n        //'SecondaryFuelModel',\n\n        'FireMgmtComplexity',\n        'IncidentComplexityLevel',\n\n        //'WFDSSDecisionStatus',\n        'EstimatedCostToDate',\n        'TotalIncidentPersonnel',\n\n        //'POOPredictiveServiceAreaID', // use to hyperlink weather info somehow?\n        'POOProtectingAgency',\n        'POOJurisdictionalAgency',\n        'POOJurisdictionalUnit',\n\n        //'FireDiscoveryDateTime',\n\n        'ICS209ReportDateTime',\n        //'ICS209ReportForTimePeriodFrom',\n        //'ICS209ReportForTimePeriodTo',\n        'ICS209ReportStatus',\n        'IncidentManagementOrganization'\n    ],\n    false // do not return geometry\n);\n\nvar query = \"IrwinId = '\" + current_feat_irwin + \"'\";\n\nvar wfigs_loc_feat = First(Filter(wfigs_locs_fset, query));\n\nif (IsEmpty(wfigs_loc_feat)) {\n    return {\n        type : 'text', \n        text : 'System Information Error. Unable to query WFIGS source for additional attributes.'\n    }\n};\n\n//REGION title\n\nvar fire_number = Text($feature.AkFireNumber, '000');\n\nvar title_name = IIF(\n    IsEmpty(wfigs_loc_feat.CpxName),\n    fire_number + '-' + $feature.wfigs_IncidentName,\n    fire_number + '-' + $feature.wfigs_IncidentName + ' (' + wfigs_loc_feat.CpxName +  ' Complex) '\n);\n\nvar info_last_updated = 'Information Last Updated: ' + \n    Text(ChangeTimeZone(Date($feature.wfigs_ModifiedOnDateTime_dt), 'America/Anchorage'), 'MMMM DD, HH:mm') +\n    ' Alaska Time' + '<br>';\n\nvar status = 'Status: ' + $feature.FireActivityStatus;\n//ENDREGION\n\n//REGION acres\nvar reported_acres = 'Reported Acres: ' + $feature.ReportedAcres;\n\nif (IsEmpty($feature.wfigs_GISAcres)) {\n    var acres_info = reported_acres;\n} else {\n    var poly_dt = IIf(\n        IsEmpty($feature.wfigs_PolygonDateTime),\n        'Perimeter mapped on unknown date/time.' + '<br>',\n        'Perimeter Mapped on ' +\n            Text(ChangeTimeZone(Date($feature.wfigs_PolygonDateTime), 'America/Anchorage'), 'MMMM DD, HH:mm') +\n            ' Alaska Time' + '<br>'\n    );\n    var poly_map_method = IIf(\n        IsEmpty($feature.wfigs_MapMethod),\n        'Map Method: Unknown',\n        'Map Method: ' + $feature.wfigs_MapMethod\n    );\n    var perimeter_intel = poly_dt + \n        'Calculated Acres: ' + Text(Round($feature.wfigs_GISAcres,2),'###,###') + '<br>' +\n        poly_map_method;\n    var acres_info = perimeter_intel;\n};\n\nif ($feature.ReportedAcOverPerimAc == 1) {\n    var acres_info = reported_acres + '<br><br>' + perimeter_intel\n}\n\n//ENDREGION\n\n//REGION dispatch center & region\nvar center = IIF(\n    IsEmpty(wfigs_loc_feat.DispatchCenterID),\n    null,\n    'Local Dispatch Center: ' + \n        Replace(wfigs_loc_feat.DispatchCenterID, 'AK', '') + '<br>'\n);\n\nvar region = IIF(\n    IsEmpty($feature.AkFireRegion),\n    null,\n    'AK Fire Region: ' + $feature.AkFireRegion\n);\n\n//REGION personnel, cost, containment\nvar personnel = IIF(\n    IsEmpty(wfigs_loc_feat.TotalIncidentPersonnel),\n    null,\n    'Total Incident Personnel: ' + Text(wfigs_loc_feat.TotalIncidentPersonnel, '###,###') + '<br>'\n);\n\nvar cost = IIF(\n    IsEmpty(wfigs_loc_feat.EstimatedCostToDate),\n    null,\n    'Estimated Cost to Date: ' + Text(wfigs_loc_feat.EstimatedCostToDate, '$###,###') + '<br>'\n);\n\nvar containment = IIF(\n    IsEmpty(wfigs_loc_feat.PercentContained),\n    null,\n    'Percent Contained: ' + wfigs_loc_feat.PercentContained + '%' + '<br>'\n    );\n\nvar to_be_contained = IIF(\n    IsEmpty(wfigs_loc_feat.PercentPerimeterToBeContained),\n    null,\n    'Percent to be Contained: ' + wfigs_loc_feat.PercentPerimeterToBeContained + '%' + '<br>'\n    );\n\nvar region_prs_cst_cnt_empty = IIF(\n    (IsEmpty(personnel) && IsEmpty(cost) && IsEmpty(containment) && IsEmpty(to_be_contained)),\n    'Personnel, Cost, and Containment Information Unavailable at this Time.' + '<br>',\n    null\n);\n//ENDREGION\n\n//REGION POO\nvar poo_protecting_agency = IIF(\n    IsEmpty(wfigs_loc_feat.POOProtectingAgency),\n    null,\n    'POO Protecting Agency: ' + wfigs_loc_feat.POOProtectingAgency + '<br>'\n);\n\nvar poo_jurisdictional_agency = IIF(\n    IsEmpty(wfigs_loc_feat.POOJurisdictionalAgency),\n    null,\n    'POO Jurisdictional Agency: ' + wfigs_loc_feat.POOJurisdictionalAgency + '<br>'\n);\n\nvar poo_jurisdictional_unit = IIF(\n    IsEmpty(wfigs_loc_feat.POOJurisdictionalUnit),\n    null,\n    'POO Jurisdictional Unit: ' + wfigs_loc_feat.POOJurisdictionalUnit + '<br>'\n);\n\nvar region_poo_empty = IIF(\n    (IsEmpty(poo_protecting_agency) && IsEmpty(poo_jurisdictional_agency) && IsEmpty(poo_jurisdictional_unit)),\n    'Point of Origin Land Management Information Unavailable at this Time.' + '<br>',\n    null\n);\n//ENDREGION\n\n//REGION IMT and 209\nvar managegement_org = IIF(\n    IsEmpty(wfigs_loc_feat.IncidentManagementOrganization),\n    null,\n    'Incident Management Organization: ' + wfigs_loc_feat.IncidentManagementOrganization + '<br>'\n);\n\nvar fire_mgmt_complexity = IIF(\n    IsEmpty(wfigs_loc_feat.FireMgmtComplexity),\n    null,\n    'Fire Management Complexity: ' + wfigs_loc_feat.FireMgmtComplexity + '<br>'\n);\n\nvar incident_complexity_level = IIF(\n    IsEmpty(wfigs_loc_feat.IncidentComplexityLevel),\n    null,\n    'Incident Complexity Level: ' + wfigs_loc_feat.IncidentComplexityLevel + '<br>'\n);\n\nvar status_209 = IIF(\n    IsEmpty(wfigs_loc_feat.ICS209ReportStatus),\n    null,\n    'ICS 209 Report Status: ' + wfigs_loc_feat.ICS209ReportStatus + '<br>'\n);\n\nvar last_209 = IIF(\n    IsEmpty(wfigs_loc_feat.ICS209ReportDateTime),\n    null,\n    'ICS 209 Report Date/Time: ' + Text(ChangeTimeZone(Date(wfigs_loc_feat.ICS209ReportDateTime), 'America/Anchorage'), 'MMMM DD, HH:mm') + ' Alaska Time' + '<br>'\n);\n\nvar region_imt_209_empty = IIF(\n    (IsEmpty(managegement_org) && IsEmpty(fire_mgmt_complexity) && IsEmpty(incident_complexity_level) && IsEmpty(status_209) && IsEmpty(last_209)),\n    'Incident Complexity & 209 Information Unavailable at this Time.' + '<br>',\n    null\n);\n//ENDREGION\n\nvar popup_header_html = '<span style=\"font-size: 16px; color: red\">' + //REGION title\n\t'<strong>' + title_name + '</strong>' + '<br>' +\n    '<i>' + info_last_updated +\n    status + '<i/></span>' + \n    '<hr style=\"border: 1px solid black;\">' + \n    '<span style=\"font-size: 14px; color: red\">' + //REGION acres\n    '<i>' + acres_info + '</i>' + '<br>' + \n    '<hr style=\"border: 1px solid black;\">' + \n    '<details><summary><strong>Click To Expand Incident Details</strong></summary>' + //REGION BEGIN DROP-DOWN\n    '<hr style=\"border: 1px solid black;\">' + \n    '<span style=\"font-size: 14px; color: red; line-height: 1.5\">' + //REGION dispatch center & region\n    center +\n    region + '</span>' +\n\t'<hr style=\"border: 1px solid black;\">' +\n    '<span style=\"font-size: 14px; color: red; line-height: 1.5\">' + //REGION personnel, cost, containment\n    containment +\n    to_be_contained + \n    personnel +\n    cost + \n    region_prs_cst_cnt_empty + '</span>' +\n\t'<hr style=\"border: 1px solid black;\">' +\n    '<span style=\"font-size: 14px; color: red; line-height: 1.5\">' + //REGION POO\n    poo_protecting_agency +\n    poo_jurisdictional_agency +\n    poo_jurisdictional_unit +\n    region_poo_empty + '</span>' +\n\t'<hr style=\"border: 1px solid black;\">' +\n    '<span style=\"font-size: 14px; color: red; line-height: 1.5\">' + //REGION management\n    managegement_org +\n    fire_mgmt_complexity +\n    incident_complexity_level +\n    status_209 +\n    last_209 + \n    region_imt_209_empty + '</span>' +\n\t'<hr style=\"border: 1px solid black;\">'\n\nreturn { \n\ttype : 'text', \n\ttext : popup_header_html\n}",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "land management",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction sumDictValues(attrDict) {\n\tvar total_value = 0; \n\tfor (var key in attrDict) { \n\t\ttotal_value += attrDict[key];\n\t}\n\treturn total_value;\n}\n\nfunction writeLandManagementTableArray(sorted_dicts_array, total_value) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###.0') + ' acres -- ' + Round((value/total_value) * 100, 2) + ' %' + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['DefaultLabel', 'MgmtOption_AcreSum', 'Jurisd_Owner_AcreSum', 'Jurisd_Unit_AcreSum']);\nvar output_tables = [];\nvar title_data_dict = Dictionary(\n\t\"Fire Management Options\", $feature.MgmtOption_AcreSum,\n\t\"Jurisdictional Ownership\", $feature.Jurisd_Owner_AcreSum,\n\t\"Jurisdictional Unit\", $feature.Jurisd_Unit_AcreSum\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar total_value = sumDictValues(attrDict);\n\tvar html_rows_array = writeLandManagementTableArray(sorted_dicts_array, total_value);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar geom_class = Split($feature.DefaultLabel, ',', 2)[1];\n\nvar summary_main_head = '<div style=\"text-align: center; margin: 0; padding: 0;\">' + \n    '<span style=\"font-size: 16px; font-weight: bold; display: inline-block;\">' + \n    'Values-at-Risk Summary,' + geom_class +\n    '</span>' + \n    '<hr style=\"border: 2px solid black; width: 80%; margin: 0; padding: 0;\">' +\n    '</div>';\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Land Management Acreage Breakdowns</strong><details><summary><i>click to expand</i></summary><br>';\nreturn { \n\ttype : 'text', \n\ttext : summary_main_head + section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n};\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Communities",
                            "expression": "// START EXECUTION\n//\nExpects($feature,[\n\t'Community_FeatureCount',\n\t'Community_Name_AttrCount',\n]); \n\nif (IsEmpty($feature.Community_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar field_dict = Dictionary($feature.Community_Name_AttrCount);\n\nvar communities = [];\n\nfor (var key in field_dict) {\n    Push(communities, '<tr><td width=\"100%\">' + key + '</td>');\n};\n\nvar feat_or_feats = IIF(\n\t$feature.Community_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Communities: ' +\n\tText(round($feature.Community_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + '<table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +  Concatenate(communities, '</tr>') + \"</table></span>\"\n};\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "USA Structures",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'UsaStruct_FeatureCount',\n\t'UsaStruct_OccCls_AttrCount',\n\t'UsaStruct_PrimOcc_AttrCount',\n\t'UsaStruct_SecOcc_AttrCount',\n]); \n\nif (IsEmpty($feature.UsaStruct_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Structures Occupational Class\", $feature.UsaStruct_OccCls_AttrCount,\n\t\"Structures Primary Occupation\", $feature.UsaStruct_PrimOcc_AttrCount,\n\t\"Structures Secondary Occupation\", $feature.UsaStruct_SecOcc_AttrCount\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.UsaStruct_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>USA Structures: ' +\n\tText(round($feature.UsaStruct_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n};\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "AKSD",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'Aksd_FeatureCount',\n\t'Aksd_MainStruct_AttrSum',\n\t'Aksd_OtherStruct_AttrSum',\n\t'Aksd_Protection_AttrCount',\n\t'Aksd_SiteCat_AttrCount'\n]);\n\nif (IsEmpty($feature.Aksd_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar main_structs = IIF(\n    IsEmpty($feature.Aksd_MainStruct_AttrSum),\n    '---no data---',\n    $feature.Aksd_MainStruct_AttrSum\n);\n\nvar other_structs = IIF(\n    IsEmpty($feature.Aksd_OtherStruct_AttrSum),\n    '---no data---',\n    $feature.Aksd_OtherStruct_AttrSum\n);\n\nvar counted_structs_attrDict = IIF(\n    main_structs == '---no data---' && other_structs == '---no data---',\n    Dictionary('---no data---', '---no data---'),\n    Dictionary(\n    'Main Structures', $feature.Aksd_MainStruct_AttrSum,\n    'Other Structures', $feature.Aksd_OtherStruct_AttrSum\n    )\n);\n\nvar title_data_dict = Dictionary(\n\t\"Counted Structures\", counted_structs_attrDict,\n\t\"Site Category Breakdown\", makeAttrDict($feature.Aksd_SiteCat_AttrCount),\n\t\"Site Protection Level Breakdown\", makeAttrDict($feature.Aksd_Protection_AttrCount)\n);\n\nfor (var title in title_data_dict) {\n\tvar attrDict = title_data_dict[title];\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array)\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.Aksd_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Alaska Known Sites Database: ' +\n\tText(round($feature.Aksd_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "NPS Structures",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'NpsStruct_FeatureCount',\n\t'NpsStruct_Use_AttrCount',\n\t'NpsStruct_Protection_AttrCount',\n\t'NpsStruct_Rating_AttrCount',\n]); \n\nif (IsEmpty($feature.NpsStruct_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Structure Use\", $feature.NpsStruct_Use_AttrCount,\n\t\"Structure Protection Level\", $feature.NpsStruct_Protection_AttrCount,\n\t\"Structure Wildfire Risk Rating\", $feature.NpsStruct_Rating_AttrCount\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.NpsStruct_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>NPS Structures: ' +\n\tText(round($feature.NpsStruct_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n};\n//\n// END EXECUTION\n",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Parcels",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeParcelAcresTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (value == '---no data---'){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + value + '</td>');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!IsEmpty(value)){\n\t\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###.0') + ' acres</td>');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\nfunction writeParcelValuesTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (value == \"---no data---\"){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + value + ' </td>');\n\t\t\t} \n\t\t\telse {\n\t\t\t\t// NOTE THE USE OF *1 HERE. value IS ALREADY TYPE TEXT.\n\t\t\t\tif (!IsEmpty(value)){\n\t\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value*1, '$###,###') + ' USD</td>');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['Parcel_BuildingValue_AttrSum','Parcel_LandValue_AttrSum','Parcel_TotalValue_AttrSum','Parcel_PropType_AcreSum','Parcel_PropUse_AcreSum','Parcel_FeatureCount']);\n\nif (IsEmpty($feature.Parcel_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar output_tables = [];\n\nvar build_val = IIF(\n    IsEmpty($feature.Parcel_BuildingValue_AttrSum) || $feature.Parcel_BuildingValue_AttrSum == 0,\n    '---no data---',\n    $feature.Parcel_BuildingValue_AttrSum\n);\n\nvar land_val = IIF(\n    IsEmpty($feature.Parcel_LandValue_AttrSum) || $feature.Parcel_LandValue_AttrSum == 0,\n    '---no data---',\n    $feature.Parcel_LandValue_AttrSum\n);\n\nvar tot_val = IIF(\n    IsEmpty($feature.Parcel_TotalValue_AttrSum) || $feature.Parcel_TotalValue_AttrSum == 0,\n    '---no data---',\n    $feature.Parcel_TotalValue_AttrSum\n);\n\nvar pval_attrDict = IIF(\n    build_val == '---no data---' && land_val == '---no data---' && tot_val == '---no data---',\n    Dictionary(\n        '---no data---', '---no data---',\n    ),\n    Dictionary(\n\t\"Parcel Building Value\", build_val,\n\t\"Parcel Land Value\", land_val,\n\t\"Parcel Total Value\", tot_val\n    )\n);\n\nvar sorted_pvalDict_array = sortDict(pval_attrDict);\nvar pval_html_rows_array = writeParcelValuesTableArray(sorted_pvalDict_array);\nvar pval_html_table = formatTable(pval_html_rows_array, \"Parcel Values\");\nPush(output_tables, pval_html_table);\n\nvar title_data_dict = Dictionary(\n\t\"Parcel Type Acreage Breakdown\", $feature.Parcel_PropType_AcreSum,\n\t\"Parcel Use Acreage Breakdown\", $feature.Parcel_PropUse_AcreSum\n);\n\nfor (var title in title_data_dict) {\n\tvar field = DefaultValue(title_data_dict, [title], \"\");\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeParcelAcresTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.Parcel_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Land Parcels: ' +\n\tText(round($feature.Parcel_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n};\n//\n// END EXECUTION\n\n",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Allotments",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeAllotmentAcresTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###.0') + ' acres</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['NtvAllot_Status_AcreSum','NtvAllot_FeatureCount']);\n\nif (IsEmpty($feature.NtvAllot_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar output_tables = [];\n\nvar title_data_dict = Dictionary(\n\t\"Allotment Status Acreage Breakdown\", $feature.NtvAllot_Status_AcreSum,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = DefaultValue(title_data_dict, [title], \"\");\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeAllotmentAcresTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.NtvAllot_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Native Allotments: ' +\n\tText(round($feature.NtvAllot_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n};\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Powerlines",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeLineFeetTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n      if (value == '---no data---'){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n      }\n\t\t\tif (value > 5280) {\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(Round(value / 5280, 2), '###,###.00') + ' miles</td>');\n\t\t\t}\n      if (value < 5280) {\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + ' feet</td>');\n      }\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['AkPowerLine_CondType_FeetSum','AkPowerLine_Voltage_FeetSum','AkPowerLine_TotalFeet']);\n\nif (IsEmpty($feature.AkPowerLine_TotalFeet)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar output_tables = [];\n\nvar title_data_dict = Dictionary(\n\t\"Powerline Types\", $feature.AkPowerLine_CondType_FeetSum,\n\t\"Powerline Voltages\", $feature.AkPowerLine_Voltage_FeetSum\n);\n\nfor (var title in title_data_dict) {\n\tvar field = DefaultValue(title_data_dict, [title], \"\");\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeLineFeetTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n}\n\nvar total_length = IIF(\n\t$feature.AkPowerLine_TotalFeet > 5280,\n\tText(Round($feature.AkPowerLine_TotalFeet / 5280, 2), '###,###.00') + ' Miles',\n\tText(Round($feature.AkPowerLine_TotalFeet, 0),'###,###') + ' Feet'\n)\n\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Powerlines: ' +\n\ttotal_length + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + \"</span>\"\n}\n//\n// END EXECUTION\n\n",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Powerplants",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n    'PowerPlant_FeatureCount',\n    'PowerPlant_PrimSource_AttrCount',\n    'PowerPlant_SectorName_AttrCount',\n    'PowerPlant_UtilName_AttrCount'\n]); \n\nif (IsEmpty($feature.PowerPlant_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Primary Power Source\", $feature.PowerPlant_PrimSource_AttrCount,\n\t\"Sector Name\", $feature.PowerPlant_SectorName_AttrCount,\n\t\"Utility Name\", $feature.PowerPlant_UtilName_AttrCount,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.PowerPlant_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Powerplants: ' +\n\tText(round($feature.PowerPlant_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Communications Sites",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'ComsTwr_FeatureCount',\n\t'ComsTwr_Type_AttrCount',\n]); \n\nif (IsEmpty($feature.ComsTwr_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Site Type\", $feature.ComsTwr_Type_AttrCount,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.ComsTwr_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Communications Sites: ' +\n\tText(round($feature.ComsTwr_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Weather Stations",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'WeatherStation_FeatureCount',\n\t'WeatherStation_Name_AttrCount',\n]); \n\nif (IsEmpty($feature.WeatherStation_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Station Type\", $feature.WeatherStation_Name_AttrCount,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.WeatherStation_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Weather Stations: ' +\n\tText(round($feature.WeatherStation_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Pipelines",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeLineFeetTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n      if (value == '---no data---'){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n      }\n\t\t\tif (value > 5280) {\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(Round(value / 5280, 2), '###,###.00') + ' miles</td>');\n\t\t\t}\n      if (value < 5280) {\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + ' feet</td>');\n      }\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['PipeLine_TotalFeet','PipeLine_Name_FeetSum']);\n\nif (IsEmpty($feature.Pipeline_TotalFeet)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar output_tables = [];\n\nvar title_data_dict = Dictionary(\n\t\"Pipelines by Name\", $feature.PipeLine_Name_FeetSum\n);\n\nfor (var title in title_data_dict) {\n\tvar field = DefaultValue(title_data_dict, [title], \"\");\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeLineFeetTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n}\n\nvar total_length = IIF(\n\t$feature.PipeLine_TotalFeet > 5280,\n\tText(Round($feature.PipeLine_TotalFeet / 5280, 2), '###,###.00') + ' Miles',\n\tText(Round($feature.PipeLine_TotalFeet, 0),'###,###') + ' Feet'\n)\n\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Pipelines: ' +\n\ttotal_length + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION\n\n",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Petrol Terminal",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n    'PetrolTerm_FeatureCount',\n    'PetrolTerm_Company_AttrCount'\n]); \n\nif (IsEmpty($feature.PetrolTerm_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Company Name\", $feature.PetrolTerm_Company_AttrCount,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.PetrolTerm_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Petrol Terminals: ' +\n\tText(round($feature.PetrolTerm_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Mines",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n    'AkMine_Note_AttrCount',\n    'AkMine_Type_AttrCount',\n    'AkMine_FeatureCount',\n\t\t'AkMine_Active_AttrCount'\n]); \n\nif (IsEmpty($feature.AkMine_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar active_attr_dict_raw = makeAttrDict($feature.AkMine_Active_AttrCount);\n\nvar rename_active_bool = Dictionary(\n\t'0', 'No',\n\t'1', 'Yes'\n);\n\nvar active_attr_dict = Dictionary()\nfor (var key in active_attr_dict_raw) {\n\tvar new_key = rename_active_bool[key]\n\tactive_attr_dict[new_key] = active_attr_dict_raw[key]\n};\n\nvar title_data_dict = Dictionary(\n\t\"Active Status\", active_attr_dict,\n\t\"Mine Ownership\", makeAttrDict($feature.AkMine_Note_AttrCount),\n  \"Mine Type\", makeAttrDict($feature.AkMine_Type_AttrCount)\n);\n\nfor (var title in title_data_dict) {\n\tvar attrDict = title_data_dict[title];\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.AkMine_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Mines: ' +\n\tText(round($feature.AkMine_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + output_tables[2] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Silviculture",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeSilvicultureAcresTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (value == '---no data---'){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + value + '</td>');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!IsEmpty(value)){\n\t\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###.0') + ' acres</td>');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\nfunction writeSilvicultureValuesTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (value == \"---no data---\"){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + value + ' </td>');\n\t\t\t} \n\t\t\telse {\n\t\t\t\tif (!IsEmpty(value)){\n\t\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '$###,###') + ' USD</td>');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['Silviculture_FeatureCount','Silviculture_Status_AcreSum','Silviculture_TotalValue_AttrSum','Silviculture_TotalAcres']);\n\nif (IsEmpty($feature.Silviculture_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar output_tables = [];\n\nvar silvi_val = IIF(\n    IsEmpty($feature.Silviculture_TotalValue_AttrSum),\n    '---no data---',\n    $feature.Silviculture_TotalValue_AttrSum\n);\n\nvar silvi_val_attrDict = Dictionary(\"Silviculture Estimated Value\", silvi_val);\n\nvar silvi_acres = IIF(\n    IsEmpty($feature.Silviculture_TotalAcres),\n    '---no data---',\n    $feature.Silviculture_TotalAcres\n);\n\nvar silvi_acres_attrDict = Dictionary(\"Silviculture Total Acres\", silvi_acres);\n\nvar sivli_val_html_rows_array = writeSilvicultureValuesTableArray([silvi_val_attrDict]);\n\nvar silvi_acres_html_rows_array = writeSilvicultureAcresTableArray([silvi_acres_attrDict]);\n\nvar silvi_totals_html_rows_array = Splice(\n    silvi_acres_html_rows_array,\n    sivli_val_html_rows_array\n)\n\nvar silvi_totals_table = formatTable(silvi_totals_html_rows_array, \"Silviculture Acreage & Estimated Value\");\nPush(output_tables, silvi_totals_table);\n\nvar title_data_dict = Dictionary(\n\t\"Silviculture Status Acreage Breakdown\", $feature.Silviculture_Status_AcreSum,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = DefaultValue(title_data_dict, [title], \"\");\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeSilvicultureAcresTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.Silviculture_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Silviculture: ' +\n\tText(round($feature.Silviculture_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + output_tables[1] + \"</span>\"\n}\n//\n// END EXECUTION\n\n",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Railroad",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeLineFeetTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n      if (value == '---no data---'){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n      }\n\t\t\tif (value > 5280) {\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(Round(value / 5280, 2), '###,###.00') + ' miles</td>');\n\t\t\t}\n      if (value < 5280) {\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + ' feet</td>');\n      }\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nExpects($feature,['Railroad_NetDesc_FeetSum','Railroad_TotalFeet']);\n\nif (IsEmpty($feature.Railroad_TotalFeet)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar output_tables = [];\n\nvar title_data_dict = Dictionary(\n\t\"Railway Type\", $feature.Railroad_NetDesc_FeetSum\n);\n\nfor (var title in title_data_dict) {\n\tvar field = DefaultValue(title_data_dict, [title], \"\");\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeLineFeetTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n}\n\nvar total_length = IIF(\n\t$feature.Railroad_TotalFeet > 5280,\n\tText(Round($feature.Railroad_TotalFeet / 5280, 2), '###,###.00') + ' Miles',\n\tText(Round($feature.Railroad_TotalFeet, 0),'###,###') + ' Feet'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Railroad: ' +\n\ttotal_length + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION\n\n",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Wind Turbines",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'WindTurb_FeatureCount',\n\t'WindTurb_ProjName_AttrCount',\n]); \n\nif (IsEmpty($feature.WindTurb_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Count by Project\", $feature.WindTurb_ProjName_AttrCount\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.WindTurb_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Wind Turbines: ' +\n\tText(round($feature.WindTurb_FeatureCount, 0),'###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Special Mgmt",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeSpecMgmtTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,['SpecMgmt_FeatureCount', 'SpecMgmt_Consid_AttrCount']); \n\nif (IsEmpty($feature.SpecMgmt_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar title_data_dict = Dictionary(\n\t\"Consideration Notes\", $feature.SpecMgmt_Consid_AttrCount,\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeSpecMgmtTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar feat_or_feats = IIF(\n\t$feature.SpecMgmt_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Special Management Considerations: ' +\n\tText($feature.SpecMgmt_FeatureCount, '###,###') + feat_or_feats + '</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    },
                    {
                        "type": "expression",
                        "expressionInfo": {
                            "title": "Aviation Facilities / Runways",
                            "expression": "// START DEFINING FUNCTIONS\n//\nfunction makeAttrDict(field) {\n    if (IsEmpty(field)) {\n\t\treturn Dictionary('---no data---','---no data---');\n\t}\n\telse {\n\t\treturn Dictionary(field);\n\t}\n}\n\nfunction dictSorter(dict_a, dict_b) {\n\tfor (var key_a in dict_a) {\n\t\tvar val_a = dict_a[key_a];\n\t}\n\tfor (var key_b in dict_b) {\n\t\tvar val_b = dict_b[key_b];\n\t}\n\tif (val_a < val_b) {\n\t\treturn 1;\n\t}\n\tif (val_a >= val_b) {\n\t\treturn -1;\n\t}\n}\n\nfunction sortDict(attrDict) {\n\tvar sorting_array = []; \n\tfor (var key in attrDict) {\n\t\tvar subDict = Dictionary(key, attrDict[key]);\n\t\tPush(sorting_array, subDict);\n\t}\n\tvar sorted_dicts_array = Sort(sorting_array, dictSorter);\n\treturn sorted_dicts_array;\n}\n\nfunction writeVarPointsTableArray(sorted_dicts_array) {\n\tvar html_rows_array = []; \n\tfor (var idx in sorted_dicts_array) {\n\t\tvar dict = sorted_dicts_array[idx];\n\t\tfor (var key in dict) {\n\t\t\tvar value = dict[key];\n\t\t\tif (!IsEmpty(value)){\n\t\t\t\tPush(html_rows_array,'<tr><td width=\"30%\">' + key + '</td><td width=\"80%\">' + Text(value, '###,###') + '</td>');\n\t\t\t}\n\t\t}\n\t}\n\treturn html_rows_array;\n}\n\t\nfunction formatTable(html_rows_array, title) {\n\tvar html_table = '<title style=\"font-size: 18px; text-align: center\"><strong>' +\n\t\ttitle + '</strong></title><table margin-top: 10px; width=\"100%\"; border=\"1\", cellpadding=\"5\">' +\n\t\tConcatenate(html_rows_array,'</tr>') + '</table><br>';\n\treturn html_table;\n}\n//\n// END DEFINING FUNCTIONS\n\n// START EXECUTION\n//\nvar output_tables = [];\n\nExpects($feature,[\n\t'Runway_FeatureCount',\n\t'Runway_LocID_AttrCount',\n\t'Runway_Ownership_AttrCount'\n]); \n\nif (IsEmpty($feature.Runway_FeatureCount)) {\n\treturn {\n\t\ttype: null,\n\t\ttext: null\n\t}\n};\n\nvar loc_id_dict = Dictionary($feature.Runway_LocID_AttrCount);\nvar unique_loc_ids = 0;\nfor (var idx in loc_id_dict) {\n\t++unique_loc_ids\n};\n\nvar title_data_dict = Dictionary(\n\t\"Runway Ownership\", $feature.Runway_Ownership_AttrCount\n);\n\nfor (var title in title_data_dict) {\n\tvar field = title_data_dict[title];\n\tvar attrDict = makeAttrDict(field);\n\tvar sorted_dicts_array = sortDict(attrDict);\n\tvar html_rows_array = writeVarPointsTableArray(sorted_dicts_array);\n\tvar html_table = formatTable(html_rows_array, title);\n\tPush(output_tables, html_table);\n};\n\nvar runway_or_runways = IIF(\n\t$feature.Runway_FeatureCount == 1,\n\t' Feature Mapped',\n\t' Features Mapped'\n);\n\nvar facility_or_facilities = IIF(\n\tunique_loc_ids == 1,\n\t' (1 Individual Landing Facility)',\n\t' (Individual Landing Facilities: ' + unique_loc_ids + ')'\n);\n\nvar section_head = '<span style=\"padding-top: 0; padding-bottom: 0; font-size: 14px\">' +\n\t'<strong>Runways: ' + Text(round($feature.Runway_FeatureCount, 0),'###,###') + runway_or_runways + facility_or_facilities +\n\t'</strong><details><summary><i>click to expand</i></summary><br>';\n\nreturn { \n\ttype : 'text', \n\ttext : section_head + output_tables[0] + \"</span>\"\n}\n//\n// END EXECUTION",
                            "returnType": "dictionary"
                        }
                    }
                ],
                "fieldInfos": [
                    {
                        "fieldName": "OBJECTID",
                        "isEditable": false,
                        "label": "OBJECTID",
                        "visible": false
                    },
                    {
                        "fieldName": "AkFireNumber",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "AkFireNumber",
                        "visible": true
                    },
                    {
                        "fieldName": "AkFireRegion",
                        "isEditable": true,
                        "label": "AkFireRegion",
                        "visible": true
                    },
                    {
                        "fieldName": "AkMine_Active_AttrCount",
                        "isEditable": true,
                        "label": "AkMine_Active_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "AkMine_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "AkMine_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "AkMine_Note_AttrCount",
                        "isEditable": true,
                        "label": "AkMine_Note_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "AkMine_Type_AttrCount",
                        "isEditable": true,
                        "label": "AkMine_Type_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "AkPowerLine_CondType_FeetSum",
                        "isEditable": true,
                        "label": "AkPowerLine_CondType_FeetSum",
                        "visible": true
                    },
                    {
                        "fieldName": "AkPowerLine_TotalFeet",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "AkPowerLine_TotalFeet",
                        "visible": true
                    },
                    {
                        "fieldName": "AkPowerLine_Voltage_FeetSum",
                        "isEditable": true,
                        "label": "AkPowerLine_Voltage_FeetSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Aksd_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Aksd_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Aksd_MainStruct_AttrSum",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Aksd_MainStruct_AttrSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Aksd_OtherStruct_AttrSum",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Aksd_OtherStruct_AttrSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Aksd_Protection_AttrCount",
                        "isEditable": true,
                        "label": "Aksd_Protection_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Aksd_SiteCat_AttrCount",
                        "isEditable": true,
                        "label": "Aksd_SiteCat_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "AnalysisBufferMiles",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "AnalysisBufferMiles",
                        "visible": true
                    },
                    {
                        "fieldName": "Community_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Community_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Community_Name_AttrCount",
                        "isEditable": true,
                        "label": "Community_Name_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "ComsTwr_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "ComsTwr_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "ComsTwr_Type_AttrCount",
                        "isEditable": true,
                        "label": "ComsTwr_Type_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "DefaultLabel",
                        "isEditable": true,
                        "label": "DefaultLabel",
                        "visible": true
                    },
                    {
                        "fieldName": "FireActivityStatus",
                        "isEditable": true,
                        "label": "FireActivityStatus",
                        "visible": true
                    },
                    {
                        "fieldName": "GlobalID",
                        "isEditable": false,
                        "label": "GlobalID",
                        "visible": false
                    },
                    {
                        "fieldName": "HasError",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "HasError",
                        "visible": true
                    },
                    {
                        "fieldName": "Jurisd_Owner_AcreSum",
                        "isEditable": true,
                        "label": "Jurisd_Owner_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Jurisd_Unit_AcreSum",
                        "isEditable": true,
                        "label": "Jurisd_Unit_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "MgmtOption_AcreSum",
                        "isEditable": true,
                        "label": "MgmtOption_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "NpsStruct_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "NpsStruct_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "NpsStruct_Protection_AttrCount",
                        "isEditable": true,
                        "label": "NpsStruct_Protection_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "NpsStruct_Rating_AttrCount",
                        "isEditable": true,
                        "label": "NpsStruct_Rating_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "NpsStruct_Use_AttrCount",
                        "isEditable": true,
                        "label": "NpsStruct_Use_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "NtvAllot_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "NtvAllot_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "NtvAllot_Status_AcreSum",
                        "isEditable": true,
                        "label": "NtvAllot_Status_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "NtvAllot_TotalAcres",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "NtvAllot_TotalAcres",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_BuildingValue_AttrSum",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Parcel_BuildingValue_AttrSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Parcel_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_LandValue_AttrSum",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Parcel_LandValue_AttrSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_PropType_AcreSum",
                        "isEditable": true,
                        "label": "Parcel_PropType_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_PropUse_AcreSum",
                        "isEditable": true,
                        "label": "Parcel_PropUse_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_TotalAcres",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Parcel_TotalAcres",
                        "visible": true
                    },
                    {
                        "fieldName": "Parcel_TotalValue_AttrSum",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Parcel_TotalValue_AttrSum",
                        "visible": true
                    },
                    {
                        "fieldName": "PetrolTerm_Company_AttrCount",
                        "isEditable": true,
                        "label": "PetrolTerm_Company_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "PetrolTerm_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "PetrolTerm_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "PipeLine_Name_FeetSum",
                        "isEditable": true,
                        "label": "PipeLine_Name_FeetSum",
                        "visible": true
                    },
                    {
                        "fieldName": "PipeLine_TotalFeet",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "PipeLine_TotalFeet",
                        "visible": true
                    },
                    {
                        "fieldName": "PowerPlant_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "PowerPlant_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "PowerPlant_PrimSource_AttrCount",
                        "isEditable": true,
                        "label": "PowerPlant_PrimSource_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "PowerPlant_SectorName_AttrCount",
                        "isEditable": true,
                        "label": "PowerPlant_SectorName_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "PowerPlant_UtilName_AttrCount",
                        "isEditable": true,
                        "label": "PowerPlant_UtilName_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Railroad_NetDesc_FeetSum",
                        "isEditable": true,
                        "label": "Railroad_NetDesc_FeetSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Railroad_TotalFeet",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Railroad_TotalFeet",
                        "visible": true
                    },
                    {
                        "fieldName": "ReportedAcOverPerimAc",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "ReportedAcOverPerimAc",
                        "visible": true
                    },
                    {
                        "fieldName": "ReportedAcres",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "ReportedAcres",
                        "visible": true
                    },
                    {
                        "fieldName": "Runway_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Runway_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Runway_LocID_AttrCount",
                        "isEditable": true,
                        "label": "Runway_LocID_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Runway_Ownership_AttrCount",
                        "isEditable": true,
                        "label": "Runway_Ownership_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Shape__Area",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": false,
                        "label": "Shape__Area",
                        "visible": true
                    },
                    {
                        "fieldName": "Shape__Length",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": false,
                        "label": "Shape__Length",
                        "visible": true
                    },
                    {
                        "fieldName": "Silviculture_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "Silviculture_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "Silviculture_Status_AcreSum",
                        "isEditable": true,
                        "label": "Silviculture_Status_AcreSum",
                        "visible": true
                    },
                    {
                        "fieldName": "Silviculture_TotalAcres",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Silviculture_TotalAcres",
                        "visible": true
                    },
                    {
                        "fieldName": "Silviculture_TotalValue_AttrSum",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "Silviculture_TotalValue_AttrSum",
                        "visible": true
                    },
                    {
                        "fieldName": "SpecMgmt_Consid_AttrCount",
                        "isEditable": true,
                        "label": "SpecMgmt_Consid_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "SpecMgmt_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "SpecMgmt_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "UsaStruct_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "UsaStruct_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "UsaStruct_OccCls_AttrCount",
                        "isEditable": true,
                        "label": "UsaStruct_OccCls_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "UsaStruct_PrimOcc_AttrCount",
                        "isEditable": true,
                        "label": "UsaStruct_PrimOcc_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "UsaStruct_SecOcc_AttrCount",
                        "isEditable": true,
                        "label": "UsaStruct_SecOcc_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "WeatherStation_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "WeatherStation_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "WeatherStation_Name_AttrCount",
                        "isEditable": true,
                        "label": "WeatherStation_Name_AttrCount",
                        "visible": true
                    },
                    {
                        "fieldName": "wfigs_GISAcres",
                        "format": {
                            "digitSeparator": true,
                            "places": 2
                        },
                        "isEditable": true,
                        "label": "wfigs_GISAcres",
                        "visible": true
                    },
                    {
                        "fieldName": "wfigs_IncidentName",
                        "isEditable": true,
                        "label": "wfigs_IncidentName",
                        "visible": true
                    },
                    {
                        "fieldName": "wfigs_IrwinID",
                        "isEditable": true,
                        "label": "wfigs_IrwinID",
                        "visible": true
                    },
                    {
                        "fieldName": "wfigs_MapMethod",
                        "isEditable": true,
                        "label": "wfigs_MapMethod",
                        "visible": true
                    },
                    {
                        "fieldName": "wfigs_ModifiedOnDateTime_dt",
                        "isEditable": true,
                        "label": "wfigs_ModifiedOnDateTime_dt",
                        "visible": true
                    },
                    {
                        "fieldName": "wfigs_PolygonDateTime",
                        "isEditable": true,
                        "label": "wfigs_PolygonDateTime",
                        "visible": true
                    },
                    {
                        "fieldName": "WindTurb_FeatureCount",
                        "format": {
                            "digitSeparator": true,
                            "places": 0
                        },
                        "isEditable": true,
                        "label": "WindTurb_FeatureCount",
                        "visible": true
                    },
                    {
                        "fieldName": "WindTurb_ProjName_AttrCount",
                        "isEditable": true,
                        "label": "WindTurb_ProjName_AttrCount",
                        "visible": true
                    }
                ],
                "title": ""
            }
        }
    ],
    "tables": []
}